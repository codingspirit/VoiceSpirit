// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/assistant/embedded/v1alpha2/embedded_assistant.proto

#ifndef PROTOBUF_INCLUDED_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto
#define PROTOBUF_INCLUDED_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/type/latlng.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto 

namespace protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto
namespace google {
namespace assistant {
namespace embedded {
namespace v1alpha2 {
class AssistConfig;
class AssistConfigDefaultTypeInternal;
extern AssistConfigDefaultTypeInternal _AssistConfig_default_instance_;
class AssistRequest;
class AssistRequestDefaultTypeInternal;
extern AssistRequestDefaultTypeInternal _AssistRequest_default_instance_;
class AssistResponse;
class AssistResponseDefaultTypeInternal;
extern AssistResponseDefaultTypeInternal _AssistResponse_default_instance_;
class AudioInConfig;
class AudioInConfigDefaultTypeInternal;
extern AudioInConfigDefaultTypeInternal _AudioInConfig_default_instance_;
class AudioOut;
class AudioOutDefaultTypeInternal;
extern AudioOutDefaultTypeInternal _AudioOut_default_instance_;
class AudioOutConfig;
class AudioOutConfigDefaultTypeInternal;
extern AudioOutConfigDefaultTypeInternal _AudioOutConfig_default_instance_;
class DebugConfig;
class DebugConfigDefaultTypeInternal;
extern DebugConfigDefaultTypeInternal _DebugConfig_default_instance_;
class DebugInfo;
class DebugInfoDefaultTypeInternal;
extern DebugInfoDefaultTypeInternal _DebugInfo_default_instance_;
class DeviceAction;
class DeviceActionDefaultTypeInternal;
extern DeviceActionDefaultTypeInternal _DeviceAction_default_instance_;
class DeviceConfig;
class DeviceConfigDefaultTypeInternal;
extern DeviceConfigDefaultTypeInternal _DeviceConfig_default_instance_;
class DeviceLocation;
class DeviceLocationDefaultTypeInternal;
extern DeviceLocationDefaultTypeInternal _DeviceLocation_default_instance_;
class DialogStateIn;
class DialogStateInDefaultTypeInternal;
extern DialogStateInDefaultTypeInternal _DialogStateIn_default_instance_;
class DialogStateOut;
class DialogStateOutDefaultTypeInternal;
extern DialogStateOutDefaultTypeInternal _DialogStateOut_default_instance_;
class ScreenOut;
class ScreenOutDefaultTypeInternal;
extern ScreenOutDefaultTypeInternal _ScreenOut_default_instance_;
class ScreenOutConfig;
class ScreenOutConfigDefaultTypeInternal;
extern ScreenOutConfigDefaultTypeInternal _ScreenOutConfig_default_instance_;
class SpeechRecognitionResult;
class SpeechRecognitionResultDefaultTypeInternal;
extern SpeechRecognitionResultDefaultTypeInternal _SpeechRecognitionResult_default_instance_;
}  // namespace v1alpha2
}  // namespace embedded
}  // namespace assistant
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::assistant::embedded::v1alpha2::AssistConfig* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AssistConfig>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::AssistRequest* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AssistRequest>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::AssistResponse* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AssistResponse>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::AudioInConfig* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AudioInConfig>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::AudioOut* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AudioOut>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::AudioOutConfig* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AudioOutConfig>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::DebugConfig* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DebugConfig>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::DebugInfo* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DebugInfo>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::DeviceAction* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DeviceAction>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::DeviceConfig* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DeviceConfig>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::DeviceLocation* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DeviceLocation>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::DialogStateIn* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DialogStateIn>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::DialogStateOut* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DialogStateOut>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::ScreenOut* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::ScreenOut>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::ScreenOutConfig* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::ScreenOutConfig>(Arena*);
template<> ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult* Arena::CreateMaybeMessage<::google::assistant::embedded::v1alpha2::SpeechRecognitionResult>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace assistant {
namespace embedded {
namespace v1alpha2 {

enum AssistResponse_EventType {
  AssistResponse_EventType_EVENT_TYPE_UNSPECIFIED = 0,
  AssistResponse_EventType_END_OF_UTTERANCE = 1,
  AssistResponse_EventType_AssistResponse_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AssistResponse_EventType_AssistResponse_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AssistResponse_EventType_IsValid(int value);
const AssistResponse_EventType AssistResponse_EventType_EventType_MIN = AssistResponse_EventType_EVENT_TYPE_UNSPECIFIED;
const AssistResponse_EventType AssistResponse_EventType_EventType_MAX = AssistResponse_EventType_END_OF_UTTERANCE;
const int AssistResponse_EventType_EventType_ARRAYSIZE = AssistResponse_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AssistResponse_EventType_descriptor();
inline const ::std::string& AssistResponse_EventType_Name(AssistResponse_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AssistResponse_EventType_descriptor(), value);
}
inline bool AssistResponse_EventType_Parse(
    const ::std::string& name, AssistResponse_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AssistResponse_EventType>(
    AssistResponse_EventType_descriptor(), name, value);
}
enum AudioInConfig_Encoding {
  AudioInConfig_Encoding_ENCODING_UNSPECIFIED = 0,
  AudioInConfig_Encoding_LINEAR16 = 1,
  AudioInConfig_Encoding_FLAC = 2,
  AudioInConfig_Encoding_AudioInConfig_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AudioInConfig_Encoding_AudioInConfig_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AudioInConfig_Encoding_IsValid(int value);
const AudioInConfig_Encoding AudioInConfig_Encoding_Encoding_MIN = AudioInConfig_Encoding_ENCODING_UNSPECIFIED;
const AudioInConfig_Encoding AudioInConfig_Encoding_Encoding_MAX = AudioInConfig_Encoding_FLAC;
const int AudioInConfig_Encoding_Encoding_ARRAYSIZE = AudioInConfig_Encoding_Encoding_MAX + 1;

const ::google::protobuf::EnumDescriptor* AudioInConfig_Encoding_descriptor();
inline const ::std::string& AudioInConfig_Encoding_Name(AudioInConfig_Encoding value) {
  return ::google::protobuf::internal::NameOfEnum(
    AudioInConfig_Encoding_descriptor(), value);
}
inline bool AudioInConfig_Encoding_Parse(
    const ::std::string& name, AudioInConfig_Encoding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioInConfig_Encoding>(
    AudioInConfig_Encoding_descriptor(), name, value);
}
enum AudioOutConfig_Encoding {
  AudioOutConfig_Encoding_ENCODING_UNSPECIFIED = 0,
  AudioOutConfig_Encoding_LINEAR16 = 1,
  AudioOutConfig_Encoding_MP3 = 2,
  AudioOutConfig_Encoding_OPUS_IN_OGG = 3,
  AudioOutConfig_Encoding_AudioOutConfig_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AudioOutConfig_Encoding_AudioOutConfig_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AudioOutConfig_Encoding_IsValid(int value);
const AudioOutConfig_Encoding AudioOutConfig_Encoding_Encoding_MIN = AudioOutConfig_Encoding_ENCODING_UNSPECIFIED;
const AudioOutConfig_Encoding AudioOutConfig_Encoding_Encoding_MAX = AudioOutConfig_Encoding_OPUS_IN_OGG;
const int AudioOutConfig_Encoding_Encoding_ARRAYSIZE = AudioOutConfig_Encoding_Encoding_MAX + 1;

const ::google::protobuf::EnumDescriptor* AudioOutConfig_Encoding_descriptor();
inline const ::std::string& AudioOutConfig_Encoding_Name(AudioOutConfig_Encoding value) {
  return ::google::protobuf::internal::NameOfEnum(
    AudioOutConfig_Encoding_descriptor(), value);
}
inline bool AudioOutConfig_Encoding_Parse(
    const ::std::string& name, AudioOutConfig_Encoding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioOutConfig_Encoding>(
    AudioOutConfig_Encoding_descriptor(), name, value);
}
enum ScreenOutConfig_ScreenMode {
  ScreenOutConfig_ScreenMode_SCREEN_MODE_UNSPECIFIED = 0,
  ScreenOutConfig_ScreenMode_OFF = 1,
  ScreenOutConfig_ScreenMode_PLAYING = 3,
  ScreenOutConfig_ScreenMode_ScreenOutConfig_ScreenMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ScreenOutConfig_ScreenMode_ScreenOutConfig_ScreenMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ScreenOutConfig_ScreenMode_IsValid(int value);
const ScreenOutConfig_ScreenMode ScreenOutConfig_ScreenMode_ScreenMode_MIN = ScreenOutConfig_ScreenMode_SCREEN_MODE_UNSPECIFIED;
const ScreenOutConfig_ScreenMode ScreenOutConfig_ScreenMode_ScreenMode_MAX = ScreenOutConfig_ScreenMode_PLAYING;
const int ScreenOutConfig_ScreenMode_ScreenMode_ARRAYSIZE = ScreenOutConfig_ScreenMode_ScreenMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScreenOutConfig_ScreenMode_descriptor();
inline const ::std::string& ScreenOutConfig_ScreenMode_Name(ScreenOutConfig_ScreenMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScreenOutConfig_ScreenMode_descriptor(), value);
}
inline bool ScreenOutConfig_ScreenMode_Parse(
    const ::std::string& name, ScreenOutConfig_ScreenMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScreenOutConfig_ScreenMode>(
    ScreenOutConfig_ScreenMode_descriptor(), name, value);
}
enum ScreenOut_Format {
  ScreenOut_Format_FORMAT_UNSPECIFIED = 0,
  ScreenOut_Format_HTML = 1,
  ScreenOut_Format_ScreenOut_Format_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ScreenOut_Format_ScreenOut_Format_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ScreenOut_Format_IsValid(int value);
const ScreenOut_Format ScreenOut_Format_Format_MIN = ScreenOut_Format_FORMAT_UNSPECIFIED;
const ScreenOut_Format ScreenOut_Format_Format_MAX = ScreenOut_Format_HTML;
const int ScreenOut_Format_Format_ARRAYSIZE = ScreenOut_Format_Format_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScreenOut_Format_descriptor();
inline const ::std::string& ScreenOut_Format_Name(ScreenOut_Format value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScreenOut_Format_descriptor(), value);
}
inline bool ScreenOut_Format_Parse(
    const ::std::string& name, ScreenOut_Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScreenOut_Format>(
    ScreenOut_Format_descriptor(), name, value);
}
enum DialogStateOut_MicrophoneMode {
  DialogStateOut_MicrophoneMode_MICROPHONE_MODE_UNSPECIFIED = 0,
  DialogStateOut_MicrophoneMode_CLOSE_MICROPHONE = 1,
  DialogStateOut_MicrophoneMode_DIALOG_FOLLOW_ON = 2,
  DialogStateOut_MicrophoneMode_DialogStateOut_MicrophoneMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DialogStateOut_MicrophoneMode_DialogStateOut_MicrophoneMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DialogStateOut_MicrophoneMode_IsValid(int value);
const DialogStateOut_MicrophoneMode DialogStateOut_MicrophoneMode_MicrophoneMode_MIN = DialogStateOut_MicrophoneMode_MICROPHONE_MODE_UNSPECIFIED;
const DialogStateOut_MicrophoneMode DialogStateOut_MicrophoneMode_MicrophoneMode_MAX = DialogStateOut_MicrophoneMode_DIALOG_FOLLOW_ON;
const int DialogStateOut_MicrophoneMode_MicrophoneMode_ARRAYSIZE = DialogStateOut_MicrophoneMode_MicrophoneMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DialogStateOut_MicrophoneMode_descriptor();
inline const ::std::string& DialogStateOut_MicrophoneMode_Name(DialogStateOut_MicrophoneMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DialogStateOut_MicrophoneMode_descriptor(), value);
}
inline bool DialogStateOut_MicrophoneMode_Parse(
    const ::std::string& name, DialogStateOut_MicrophoneMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DialogStateOut_MicrophoneMode>(
    DialogStateOut_MicrophoneMode_descriptor(), name, value);
}
// ===================================================================

class AssistRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.AssistRequest) */ {
 public:
  AssistRequest();
  virtual ~AssistRequest();

  AssistRequest(const AssistRequest& from);

  inline AssistRequest& operator=(const AssistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AssistRequest(AssistRequest&& from) noexcept
    : AssistRequest() {
    *this = ::std::move(from);
  }

  inline AssistRequest& operator=(AssistRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AssistRequest& default_instance();

  enum TypeCase {
    kConfig = 1,
    kAudioIn = 2,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssistRequest* internal_default_instance() {
    return reinterpret_cast<const AssistRequest*>(
               &_AssistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AssistRequest* other);
  friend void swap(AssistRequest& a, AssistRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AssistRequest* New() const final {
    return CreateMaybeMessage<AssistRequest>(NULL);
  }

  AssistRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AssistRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AssistRequest& from);
  void MergeFrom(const AssistRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssistRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.assistant.embedded.v1alpha2.AssistConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  private:
  const ::google::assistant::embedded::v1alpha2::AssistConfig& _internal_config() const;
  public:
  const ::google::assistant::embedded::v1alpha2::AssistConfig& config() const;
  ::google::assistant::embedded::v1alpha2::AssistConfig* release_config();
  ::google::assistant::embedded::v1alpha2::AssistConfig* mutable_config();
  void set_allocated_config(::google::assistant::embedded::v1alpha2::AssistConfig* config);

  // bytes audio_in = 2;
  private:
  bool has_audio_in() const;
  public:
  void clear_audio_in();
  static const int kAudioInFieldNumber = 2;
  const ::std::string& audio_in() const;
  void set_audio_in(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_in(::std::string&& value);
  #endif
  void set_audio_in(const char* value);
  void set_audio_in(const void* value, size_t size);
  ::std::string* mutable_audio_in();
  ::std::string* release_audio_in();
  void set_allocated_audio_in(::std::string* audio_in);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.AssistRequest)
 private:
  void set_has_config();
  void set_has_audio_in();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::google::assistant::embedded::v1alpha2::AssistConfig* config_;
    ::google::protobuf::internal::ArenaStringPtr audio_in_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AssistResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.AssistResponse) */ {
 public:
  AssistResponse();
  virtual ~AssistResponse();

  AssistResponse(const AssistResponse& from);

  inline AssistResponse& operator=(const AssistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AssistResponse(AssistResponse&& from) noexcept
    : AssistResponse() {
    *this = ::std::move(from);
  }

  inline AssistResponse& operator=(AssistResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AssistResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssistResponse* internal_default_instance() {
    return reinterpret_cast<const AssistResponse*>(
               &_AssistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AssistResponse* other);
  friend void swap(AssistResponse& a, AssistResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AssistResponse* New() const final {
    return CreateMaybeMessage<AssistResponse>(NULL);
  }

  AssistResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AssistResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AssistResponse& from);
  void MergeFrom(const AssistResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssistResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AssistResponse_EventType EventType;
  static const EventType EVENT_TYPE_UNSPECIFIED =
    AssistResponse_EventType_EVENT_TYPE_UNSPECIFIED;
  static const EventType END_OF_UTTERANCE =
    AssistResponse_EventType_END_OF_UTTERANCE;
  static inline bool EventType_IsValid(int value) {
    return AssistResponse_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    AssistResponse_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    AssistResponse_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    AssistResponse_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return AssistResponse_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return AssistResponse_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return AssistResponse_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.assistant.embedded.v1alpha2.SpeechRecognitionResult speech_results = 2;
  int speech_results_size() const;
  void clear_speech_results();
  static const int kSpeechResultsFieldNumber = 2;
  ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult* mutable_speech_results(int index);
  ::google::protobuf::RepeatedPtrField< ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult >*
      mutable_speech_results();
  const ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult& speech_results(int index) const;
  ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult* add_speech_results();
  const ::google::protobuf::RepeatedPtrField< ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult >&
      speech_results() const;

  // .google.assistant.embedded.v1alpha2.AudioOut audio_out = 3;
  bool has_audio_out() const;
  void clear_audio_out();
  static const int kAudioOutFieldNumber = 3;
  private:
  const ::google::assistant::embedded::v1alpha2::AudioOut& _internal_audio_out() const;
  public:
  const ::google::assistant::embedded::v1alpha2::AudioOut& audio_out() const;
  ::google::assistant::embedded::v1alpha2::AudioOut* release_audio_out();
  ::google::assistant::embedded::v1alpha2::AudioOut* mutable_audio_out();
  void set_allocated_audio_out(::google::assistant::embedded::v1alpha2::AudioOut* audio_out);

  // .google.assistant.embedded.v1alpha2.ScreenOut screen_out = 4;
  bool has_screen_out() const;
  void clear_screen_out();
  static const int kScreenOutFieldNumber = 4;
  private:
  const ::google::assistant::embedded::v1alpha2::ScreenOut& _internal_screen_out() const;
  public:
  const ::google::assistant::embedded::v1alpha2::ScreenOut& screen_out() const;
  ::google::assistant::embedded::v1alpha2::ScreenOut* release_screen_out();
  ::google::assistant::embedded::v1alpha2::ScreenOut* mutable_screen_out();
  void set_allocated_screen_out(::google::assistant::embedded::v1alpha2::ScreenOut* screen_out);

  // .google.assistant.embedded.v1alpha2.DialogStateOut dialog_state_out = 5;
  bool has_dialog_state_out() const;
  void clear_dialog_state_out();
  static const int kDialogStateOutFieldNumber = 5;
  private:
  const ::google::assistant::embedded::v1alpha2::DialogStateOut& _internal_dialog_state_out() const;
  public:
  const ::google::assistant::embedded::v1alpha2::DialogStateOut& dialog_state_out() const;
  ::google::assistant::embedded::v1alpha2::DialogStateOut* release_dialog_state_out();
  ::google::assistant::embedded::v1alpha2::DialogStateOut* mutable_dialog_state_out();
  void set_allocated_dialog_state_out(::google::assistant::embedded::v1alpha2::DialogStateOut* dialog_state_out);

  // .google.assistant.embedded.v1alpha2.DeviceAction device_action = 6;
  bool has_device_action() const;
  void clear_device_action();
  static const int kDeviceActionFieldNumber = 6;
  private:
  const ::google::assistant::embedded::v1alpha2::DeviceAction& _internal_device_action() const;
  public:
  const ::google::assistant::embedded::v1alpha2::DeviceAction& device_action() const;
  ::google::assistant::embedded::v1alpha2::DeviceAction* release_device_action();
  ::google::assistant::embedded::v1alpha2::DeviceAction* mutable_device_action();
  void set_allocated_device_action(::google::assistant::embedded::v1alpha2::DeviceAction* device_action);

  // .google.assistant.embedded.v1alpha2.DebugInfo debug_info = 8;
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 8;
  private:
  const ::google::assistant::embedded::v1alpha2::DebugInfo& _internal_debug_info() const;
  public:
  const ::google::assistant::embedded::v1alpha2::DebugInfo& debug_info() const;
  ::google::assistant::embedded::v1alpha2::DebugInfo* release_debug_info();
  ::google::assistant::embedded::v1alpha2::DebugInfo* mutable_debug_info();
  void set_allocated_debug_info(::google::assistant::embedded::v1alpha2::DebugInfo* debug_info);

  // .google.assistant.embedded.v1alpha2.AssistResponse.EventType event_type = 1;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  ::google::assistant::embedded::v1alpha2::AssistResponse_EventType event_type() const;
  void set_event_type(::google::assistant::embedded::v1alpha2::AssistResponse_EventType value);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.AssistResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult > speech_results_;
  ::google::assistant::embedded::v1alpha2::AudioOut* audio_out_;
  ::google::assistant::embedded::v1alpha2::ScreenOut* screen_out_;
  ::google::assistant::embedded::v1alpha2::DialogStateOut* dialog_state_out_;
  ::google::assistant::embedded::v1alpha2::DeviceAction* device_action_;
  ::google::assistant::embedded::v1alpha2::DebugInfo* debug_info_;
  int event_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DebugInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.DebugInfo) */ {
 public:
  DebugInfo();
  virtual ~DebugInfo();

  DebugInfo(const DebugInfo& from);

  inline DebugInfo& operator=(const DebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugInfo(DebugInfo&& from) noexcept
    : DebugInfo() {
    *this = ::std::move(from);
  }

  inline DebugInfo& operator=(DebugInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugInfo* internal_default_instance() {
    return reinterpret_cast<const DebugInfo*>(
               &_DebugInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DebugInfo* other);
  friend void swap(DebugInfo& a, DebugInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugInfo* New() const final {
    return CreateMaybeMessage<DebugInfo>(NULL);
  }

  DebugInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DebugInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DebugInfo& from);
  void MergeFrom(const DebugInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string aog_agent_to_assistant_json = 1;
  void clear_aog_agent_to_assistant_json();
  static const int kAogAgentToAssistantJsonFieldNumber = 1;
  const ::std::string& aog_agent_to_assistant_json() const;
  void set_aog_agent_to_assistant_json(const ::std::string& value);
  #if LANG_CXX11
  void set_aog_agent_to_assistant_json(::std::string&& value);
  #endif
  void set_aog_agent_to_assistant_json(const char* value);
  void set_aog_agent_to_assistant_json(const char* value, size_t size);
  ::std::string* mutable_aog_agent_to_assistant_json();
  ::std::string* release_aog_agent_to_assistant_json();
  void set_allocated_aog_agent_to_assistant_json(::std::string* aog_agent_to_assistant_json);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.DebugInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr aog_agent_to_assistant_json_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AssistConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.AssistConfig) */ {
 public:
  AssistConfig();
  virtual ~AssistConfig();

  AssistConfig(const AssistConfig& from);

  inline AssistConfig& operator=(const AssistConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AssistConfig(AssistConfig&& from) noexcept
    : AssistConfig() {
    *this = ::std::move(from);
  }

  inline AssistConfig& operator=(AssistConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AssistConfig& default_instance();

  enum TypeCase {
    kAudioInConfig = 1,
    kTextQuery = 6,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssistConfig* internal_default_instance() {
    return reinterpret_cast<const AssistConfig*>(
               &_AssistConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AssistConfig* other);
  friend void swap(AssistConfig& a, AssistConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AssistConfig* New() const final {
    return CreateMaybeMessage<AssistConfig>(NULL);
  }

  AssistConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AssistConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AssistConfig& from);
  void MergeFrom(const AssistConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssistConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.assistant.embedded.v1alpha2.AudioOutConfig audio_out_config = 2;
  bool has_audio_out_config() const;
  void clear_audio_out_config();
  static const int kAudioOutConfigFieldNumber = 2;
  private:
  const ::google::assistant::embedded::v1alpha2::AudioOutConfig& _internal_audio_out_config() const;
  public:
  const ::google::assistant::embedded::v1alpha2::AudioOutConfig& audio_out_config() const;
  ::google::assistant::embedded::v1alpha2::AudioOutConfig* release_audio_out_config();
  ::google::assistant::embedded::v1alpha2::AudioOutConfig* mutable_audio_out_config();
  void set_allocated_audio_out_config(::google::assistant::embedded::v1alpha2::AudioOutConfig* audio_out_config);

  // .google.assistant.embedded.v1alpha2.DialogStateIn dialog_state_in = 3;
  bool has_dialog_state_in() const;
  void clear_dialog_state_in();
  static const int kDialogStateInFieldNumber = 3;
  private:
  const ::google::assistant::embedded::v1alpha2::DialogStateIn& _internal_dialog_state_in() const;
  public:
  const ::google::assistant::embedded::v1alpha2::DialogStateIn& dialog_state_in() const;
  ::google::assistant::embedded::v1alpha2::DialogStateIn* release_dialog_state_in();
  ::google::assistant::embedded::v1alpha2::DialogStateIn* mutable_dialog_state_in();
  void set_allocated_dialog_state_in(::google::assistant::embedded::v1alpha2::DialogStateIn* dialog_state_in);

  // .google.assistant.embedded.v1alpha2.DeviceConfig device_config = 4;
  bool has_device_config() const;
  void clear_device_config();
  static const int kDeviceConfigFieldNumber = 4;
  private:
  const ::google::assistant::embedded::v1alpha2::DeviceConfig& _internal_device_config() const;
  public:
  const ::google::assistant::embedded::v1alpha2::DeviceConfig& device_config() const;
  ::google::assistant::embedded::v1alpha2::DeviceConfig* release_device_config();
  ::google::assistant::embedded::v1alpha2::DeviceConfig* mutable_device_config();
  void set_allocated_device_config(::google::assistant::embedded::v1alpha2::DeviceConfig* device_config);

  // .google.assistant.embedded.v1alpha2.DebugConfig debug_config = 5;
  bool has_debug_config() const;
  void clear_debug_config();
  static const int kDebugConfigFieldNumber = 5;
  private:
  const ::google::assistant::embedded::v1alpha2::DebugConfig& _internal_debug_config() const;
  public:
  const ::google::assistant::embedded::v1alpha2::DebugConfig& debug_config() const;
  ::google::assistant::embedded::v1alpha2::DebugConfig* release_debug_config();
  ::google::assistant::embedded::v1alpha2::DebugConfig* mutable_debug_config();
  void set_allocated_debug_config(::google::assistant::embedded::v1alpha2::DebugConfig* debug_config);

  // .google.assistant.embedded.v1alpha2.ScreenOutConfig screen_out_config = 8;
  bool has_screen_out_config() const;
  void clear_screen_out_config();
  static const int kScreenOutConfigFieldNumber = 8;
  private:
  const ::google::assistant::embedded::v1alpha2::ScreenOutConfig& _internal_screen_out_config() const;
  public:
  const ::google::assistant::embedded::v1alpha2::ScreenOutConfig& screen_out_config() const;
  ::google::assistant::embedded::v1alpha2::ScreenOutConfig* release_screen_out_config();
  ::google::assistant::embedded::v1alpha2::ScreenOutConfig* mutable_screen_out_config();
  void set_allocated_screen_out_config(::google::assistant::embedded::v1alpha2::ScreenOutConfig* screen_out_config);

  // .google.assistant.embedded.v1alpha2.AudioInConfig audio_in_config = 1;
  bool has_audio_in_config() const;
  void clear_audio_in_config();
  static const int kAudioInConfigFieldNumber = 1;
  private:
  const ::google::assistant::embedded::v1alpha2::AudioInConfig& _internal_audio_in_config() const;
  public:
  const ::google::assistant::embedded::v1alpha2::AudioInConfig& audio_in_config() const;
  ::google::assistant::embedded::v1alpha2::AudioInConfig* release_audio_in_config();
  ::google::assistant::embedded::v1alpha2::AudioInConfig* mutable_audio_in_config();
  void set_allocated_audio_in_config(::google::assistant::embedded::v1alpha2::AudioInConfig* audio_in_config);

  // string text_query = 6;
  private:
  bool has_text_query() const;
  public:
  void clear_text_query();
  static const int kTextQueryFieldNumber = 6;
  const ::std::string& text_query() const;
  void set_text_query(const ::std::string& value);
  #if LANG_CXX11
  void set_text_query(::std::string&& value);
  #endif
  void set_text_query(const char* value);
  void set_text_query(const char* value, size_t size);
  ::std::string* mutable_text_query();
  ::std::string* release_text_query();
  void set_allocated_text_query(::std::string* text_query);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.AssistConfig)
 private:
  void set_has_audio_in_config();
  void set_has_text_query();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::assistant::embedded::v1alpha2::AudioOutConfig* audio_out_config_;
  ::google::assistant::embedded::v1alpha2::DialogStateIn* dialog_state_in_;
  ::google::assistant::embedded::v1alpha2::DeviceConfig* device_config_;
  ::google::assistant::embedded::v1alpha2::DebugConfig* debug_config_;
  ::google::assistant::embedded::v1alpha2::ScreenOutConfig* screen_out_config_;
  union TypeUnion {
    TypeUnion() {}
    ::google::assistant::embedded::v1alpha2::AudioInConfig* audio_in_config_;
    ::google::protobuf::internal::ArenaStringPtr text_query_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioInConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.AudioInConfig) */ {
 public:
  AudioInConfig();
  virtual ~AudioInConfig();

  AudioInConfig(const AudioInConfig& from);

  inline AudioInConfig& operator=(const AudioInConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioInConfig(AudioInConfig&& from) noexcept
    : AudioInConfig() {
    *this = ::std::move(from);
  }

  inline AudioInConfig& operator=(AudioInConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioInConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioInConfig* internal_default_instance() {
    return reinterpret_cast<const AudioInConfig*>(
               &_AudioInConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AudioInConfig* other);
  friend void swap(AudioInConfig& a, AudioInConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioInConfig* New() const final {
    return CreateMaybeMessage<AudioInConfig>(NULL);
  }

  AudioInConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioInConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioInConfig& from);
  void MergeFrom(const AudioInConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioInConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AudioInConfig_Encoding Encoding;
  static const Encoding ENCODING_UNSPECIFIED =
    AudioInConfig_Encoding_ENCODING_UNSPECIFIED;
  static const Encoding LINEAR16 =
    AudioInConfig_Encoding_LINEAR16;
  static const Encoding FLAC =
    AudioInConfig_Encoding_FLAC;
  static inline bool Encoding_IsValid(int value) {
    return AudioInConfig_Encoding_IsValid(value);
  }
  static const Encoding Encoding_MIN =
    AudioInConfig_Encoding_Encoding_MIN;
  static const Encoding Encoding_MAX =
    AudioInConfig_Encoding_Encoding_MAX;
  static const int Encoding_ARRAYSIZE =
    AudioInConfig_Encoding_Encoding_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Encoding_descriptor() {
    return AudioInConfig_Encoding_descriptor();
  }
  static inline const ::std::string& Encoding_Name(Encoding value) {
    return AudioInConfig_Encoding_Name(value);
  }
  static inline bool Encoding_Parse(const ::std::string& name,
      Encoding* value) {
    return AudioInConfig_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.assistant.embedded.v1alpha2.AudioInConfig.Encoding encoding = 1;
  void clear_encoding();
  static const int kEncodingFieldNumber = 1;
  ::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding encoding() const;
  void set_encoding(::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding value);

  // int32 sample_rate_hertz = 2;
  void clear_sample_rate_hertz();
  static const int kSampleRateHertzFieldNumber = 2;
  ::google::protobuf::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.AudioInConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int encoding_;
  ::google::protobuf::int32 sample_rate_hertz_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioOutConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.AudioOutConfig) */ {
 public:
  AudioOutConfig();
  virtual ~AudioOutConfig();

  AudioOutConfig(const AudioOutConfig& from);

  inline AudioOutConfig& operator=(const AudioOutConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioOutConfig(AudioOutConfig&& from) noexcept
    : AudioOutConfig() {
    *this = ::std::move(from);
  }

  inline AudioOutConfig& operator=(AudioOutConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioOutConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioOutConfig* internal_default_instance() {
    return reinterpret_cast<const AudioOutConfig*>(
               &_AudioOutConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AudioOutConfig* other);
  friend void swap(AudioOutConfig& a, AudioOutConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioOutConfig* New() const final {
    return CreateMaybeMessage<AudioOutConfig>(NULL);
  }

  AudioOutConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioOutConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioOutConfig& from);
  void MergeFrom(const AudioOutConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioOutConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AudioOutConfig_Encoding Encoding;
  static const Encoding ENCODING_UNSPECIFIED =
    AudioOutConfig_Encoding_ENCODING_UNSPECIFIED;
  static const Encoding LINEAR16 =
    AudioOutConfig_Encoding_LINEAR16;
  static const Encoding MP3 =
    AudioOutConfig_Encoding_MP3;
  static const Encoding OPUS_IN_OGG =
    AudioOutConfig_Encoding_OPUS_IN_OGG;
  static inline bool Encoding_IsValid(int value) {
    return AudioOutConfig_Encoding_IsValid(value);
  }
  static const Encoding Encoding_MIN =
    AudioOutConfig_Encoding_Encoding_MIN;
  static const Encoding Encoding_MAX =
    AudioOutConfig_Encoding_Encoding_MAX;
  static const int Encoding_ARRAYSIZE =
    AudioOutConfig_Encoding_Encoding_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Encoding_descriptor() {
    return AudioOutConfig_Encoding_descriptor();
  }
  static inline const ::std::string& Encoding_Name(Encoding value) {
    return AudioOutConfig_Encoding_Name(value);
  }
  static inline bool Encoding_Parse(const ::std::string& name,
      Encoding* value) {
    return AudioOutConfig_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.assistant.embedded.v1alpha2.AudioOutConfig.Encoding encoding = 1;
  void clear_encoding();
  static const int kEncodingFieldNumber = 1;
  ::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding encoding() const;
  void set_encoding(::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding value);

  // int32 sample_rate_hertz = 2;
  void clear_sample_rate_hertz();
  static const int kSampleRateHertzFieldNumber = 2;
  ::google::protobuf::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::google::protobuf::int32 value);

  // int32 volume_percentage = 3;
  void clear_volume_percentage();
  static const int kVolumePercentageFieldNumber = 3;
  ::google::protobuf::int32 volume_percentage() const;
  void set_volume_percentage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.AudioOutConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int encoding_;
  ::google::protobuf::int32 sample_rate_hertz_;
  ::google::protobuf::int32 volume_percentage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScreenOutConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.ScreenOutConfig) */ {
 public:
  ScreenOutConfig();
  virtual ~ScreenOutConfig();

  ScreenOutConfig(const ScreenOutConfig& from);

  inline ScreenOutConfig& operator=(const ScreenOutConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScreenOutConfig(ScreenOutConfig&& from) noexcept
    : ScreenOutConfig() {
    *this = ::std::move(from);
  }

  inline ScreenOutConfig& operator=(ScreenOutConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScreenOutConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScreenOutConfig* internal_default_instance() {
    return reinterpret_cast<const ScreenOutConfig*>(
               &_ScreenOutConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ScreenOutConfig* other);
  friend void swap(ScreenOutConfig& a, ScreenOutConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScreenOutConfig* New() const final {
    return CreateMaybeMessage<ScreenOutConfig>(NULL);
  }

  ScreenOutConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScreenOutConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScreenOutConfig& from);
  void MergeFrom(const ScreenOutConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenOutConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScreenOutConfig_ScreenMode ScreenMode;
  static const ScreenMode SCREEN_MODE_UNSPECIFIED =
    ScreenOutConfig_ScreenMode_SCREEN_MODE_UNSPECIFIED;
  static const ScreenMode OFF =
    ScreenOutConfig_ScreenMode_OFF;
  static const ScreenMode PLAYING =
    ScreenOutConfig_ScreenMode_PLAYING;
  static inline bool ScreenMode_IsValid(int value) {
    return ScreenOutConfig_ScreenMode_IsValid(value);
  }
  static const ScreenMode ScreenMode_MIN =
    ScreenOutConfig_ScreenMode_ScreenMode_MIN;
  static const ScreenMode ScreenMode_MAX =
    ScreenOutConfig_ScreenMode_ScreenMode_MAX;
  static const int ScreenMode_ARRAYSIZE =
    ScreenOutConfig_ScreenMode_ScreenMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScreenMode_descriptor() {
    return ScreenOutConfig_ScreenMode_descriptor();
  }
  static inline const ::std::string& ScreenMode_Name(ScreenMode value) {
    return ScreenOutConfig_ScreenMode_Name(value);
  }
  static inline bool ScreenMode_Parse(const ::std::string& name,
      ScreenMode* value) {
    return ScreenOutConfig_ScreenMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;
  void clear_screen_mode();
  static const int kScreenModeFieldNumber = 1;
  ::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode screen_mode() const;
  void set_screen_mode(::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode value);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.ScreenOutConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int screen_mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DialogStateIn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.DialogStateIn) */ {
 public:
  DialogStateIn();
  virtual ~DialogStateIn();

  DialogStateIn(const DialogStateIn& from);

  inline DialogStateIn& operator=(const DialogStateIn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DialogStateIn(DialogStateIn&& from) noexcept
    : DialogStateIn() {
    *this = ::std::move(from);
  }

  inline DialogStateIn& operator=(DialogStateIn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DialogStateIn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DialogStateIn* internal_default_instance() {
    return reinterpret_cast<const DialogStateIn*>(
               &_DialogStateIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DialogStateIn* other);
  friend void swap(DialogStateIn& a, DialogStateIn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DialogStateIn* New() const final {
    return CreateMaybeMessage<DialogStateIn>(NULL);
  }

  DialogStateIn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DialogStateIn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DialogStateIn& from);
  void MergeFrom(const DialogStateIn& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DialogStateIn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes conversation_state = 1;
  void clear_conversation_state();
  static const int kConversationStateFieldNumber = 1;
  const ::std::string& conversation_state() const;
  void set_conversation_state(const ::std::string& value);
  #if LANG_CXX11
  void set_conversation_state(::std::string&& value);
  #endif
  void set_conversation_state(const char* value);
  void set_conversation_state(const void* value, size_t size);
  ::std::string* mutable_conversation_state();
  ::std::string* release_conversation_state();
  void set_allocated_conversation_state(::std::string* conversation_state);

  // string language_code = 2;
  void clear_language_code();
  static const int kLanguageCodeFieldNumber = 2;
  const ::std::string& language_code() const;
  void set_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_language_code(::std::string&& value);
  #endif
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  ::std::string* mutable_language_code();
  ::std::string* release_language_code();
  void set_allocated_language_code(::std::string* language_code);

  // .google.assistant.embedded.v1alpha2.DeviceLocation device_location = 5;
  bool has_device_location() const;
  void clear_device_location();
  static const int kDeviceLocationFieldNumber = 5;
  private:
  const ::google::assistant::embedded::v1alpha2::DeviceLocation& _internal_device_location() const;
  public:
  const ::google::assistant::embedded::v1alpha2::DeviceLocation& device_location() const;
  ::google::assistant::embedded::v1alpha2::DeviceLocation* release_device_location();
  ::google::assistant::embedded::v1alpha2::DeviceLocation* mutable_device_location();
  void set_allocated_device_location(::google::assistant::embedded::v1alpha2::DeviceLocation* device_location);

  // bool is_new_conversation = 7;
  void clear_is_new_conversation();
  static const int kIsNewConversationFieldNumber = 7;
  bool is_new_conversation() const;
  void set_is_new_conversation(bool value);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.DialogStateIn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr conversation_state_;
  ::google::protobuf::internal::ArenaStringPtr language_code_;
  ::google::assistant::embedded::v1alpha2::DeviceLocation* device_location_;
  bool is_new_conversation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.DeviceConfig) */ {
 public:
  DeviceConfig();
  virtual ~DeviceConfig();

  DeviceConfig(const DeviceConfig& from);

  inline DeviceConfig& operator=(const DeviceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceConfig(DeviceConfig&& from) noexcept
    : DeviceConfig() {
    *this = ::std::move(from);
  }

  inline DeviceConfig& operator=(DeviceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceConfig* internal_default_instance() {
    return reinterpret_cast<const DeviceConfig*>(
               &_DeviceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DeviceConfig* other);
  friend void swap(DeviceConfig& a, DeviceConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceConfig* New() const final {
    return CreateMaybeMessage<DeviceConfig>(NULL);
  }

  DeviceConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceConfig& from);
  void MergeFrom(const DeviceConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string device_id = 1;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  const ::std::string& device_id() const;
  void set_device_id(const ::std::string& value);
  #if LANG_CXX11
  void set_device_id(::std::string&& value);
  #endif
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  ::std::string* mutable_device_id();
  ::std::string* release_device_id();
  void set_allocated_device_id(::std::string* device_id);

  // string device_model_id = 3;
  void clear_device_model_id();
  static const int kDeviceModelIdFieldNumber = 3;
  const ::std::string& device_model_id() const;
  void set_device_model_id(const ::std::string& value);
  #if LANG_CXX11
  void set_device_model_id(::std::string&& value);
  #endif
  void set_device_model_id(const char* value);
  void set_device_model_id(const char* value, size_t size);
  ::std::string* mutable_device_model_id();
  ::std::string* release_device_model_id();
  void set_allocated_device_model_id(::std::string* device_model_id);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.DeviceConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr device_id_;
  ::google::protobuf::internal::ArenaStringPtr device_model_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioOut : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.AudioOut) */ {
 public:
  AudioOut();
  virtual ~AudioOut();

  AudioOut(const AudioOut& from);

  inline AudioOut& operator=(const AudioOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioOut(AudioOut&& from) noexcept
    : AudioOut() {
    *this = ::std::move(from);
  }

  inline AudioOut& operator=(AudioOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioOut* internal_default_instance() {
    return reinterpret_cast<const AudioOut*>(
               &_AudioOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AudioOut* other);
  friend void swap(AudioOut& a, AudioOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioOut* New() const final {
    return CreateMaybeMessage<AudioOut>(NULL);
  }

  AudioOut* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioOut>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioOut& from);
  void MergeFrom(const AudioOut& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioOut* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes audio_data = 1;
  void clear_audio_data();
  static const int kAudioDataFieldNumber = 1;
  const ::std::string& audio_data() const;
  void set_audio_data(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_data(::std::string&& value);
  #endif
  void set_audio_data(const char* value);
  void set_audio_data(const void* value, size_t size);
  ::std::string* mutable_audio_data();
  ::std::string* release_audio_data();
  void set_allocated_audio_data(::std::string* audio_data);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.AudioOut)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr audio_data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScreenOut : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.ScreenOut) */ {
 public:
  ScreenOut();
  virtual ~ScreenOut();

  ScreenOut(const ScreenOut& from);

  inline ScreenOut& operator=(const ScreenOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScreenOut(ScreenOut&& from) noexcept
    : ScreenOut() {
    *this = ::std::move(from);
  }

  inline ScreenOut& operator=(ScreenOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScreenOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScreenOut* internal_default_instance() {
    return reinterpret_cast<const ScreenOut*>(
               &_ScreenOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ScreenOut* other);
  friend void swap(ScreenOut& a, ScreenOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScreenOut* New() const final {
    return CreateMaybeMessage<ScreenOut>(NULL);
  }

  ScreenOut* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScreenOut>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScreenOut& from);
  void MergeFrom(const ScreenOut& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenOut* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScreenOut_Format Format;
  static const Format FORMAT_UNSPECIFIED =
    ScreenOut_Format_FORMAT_UNSPECIFIED;
  static const Format HTML =
    ScreenOut_Format_HTML;
  static inline bool Format_IsValid(int value) {
    return ScreenOut_Format_IsValid(value);
  }
  static const Format Format_MIN =
    ScreenOut_Format_Format_MIN;
  static const Format Format_MAX =
    ScreenOut_Format_Format_MAX;
  static const int Format_ARRAYSIZE =
    ScreenOut_Format_Format_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Format_descriptor() {
    return ScreenOut_Format_descriptor();
  }
  static inline const ::std::string& Format_Name(Format value) {
    return ScreenOut_Format_Name(value);
  }
  static inline bool Format_Parse(const ::std::string& name,
      Format* value) {
    return ScreenOut_Format_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .google.assistant.embedded.v1alpha2.ScreenOut.Format format = 1;
  void clear_format();
  static const int kFormatFieldNumber = 1;
  ::google::assistant::embedded::v1alpha2::ScreenOut_Format format() const;
  void set_format(::google::assistant::embedded::v1alpha2::ScreenOut_Format value);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.ScreenOut)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.DeviceAction) */ {
 public:
  DeviceAction();
  virtual ~DeviceAction();

  DeviceAction(const DeviceAction& from);

  inline DeviceAction& operator=(const DeviceAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceAction(DeviceAction&& from) noexcept
    : DeviceAction() {
    *this = ::std::move(from);
  }

  inline DeviceAction& operator=(DeviceAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceAction* internal_default_instance() {
    return reinterpret_cast<const DeviceAction*>(
               &_DeviceAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(DeviceAction* other);
  friend void swap(DeviceAction& a, DeviceAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceAction* New() const final {
    return CreateMaybeMessage<DeviceAction>(NULL);
  }

  DeviceAction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceAction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceAction& from);
  void MergeFrom(const DeviceAction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string device_request_json = 1;
  void clear_device_request_json();
  static const int kDeviceRequestJsonFieldNumber = 1;
  const ::std::string& device_request_json() const;
  void set_device_request_json(const ::std::string& value);
  #if LANG_CXX11
  void set_device_request_json(::std::string&& value);
  #endif
  void set_device_request_json(const char* value);
  void set_device_request_json(const char* value, size_t size);
  ::std::string* mutable_device_request_json();
  ::std::string* release_device_request_json();
  void set_allocated_device_request_json(::std::string* device_request_json);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.DeviceAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr device_request_json_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeechRecognitionResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.SpeechRecognitionResult) */ {
 public:
  SpeechRecognitionResult();
  virtual ~SpeechRecognitionResult();

  SpeechRecognitionResult(const SpeechRecognitionResult& from);

  inline SpeechRecognitionResult& operator=(const SpeechRecognitionResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeechRecognitionResult(SpeechRecognitionResult&& from) noexcept
    : SpeechRecognitionResult() {
    *this = ::std::move(from);
  }

  inline SpeechRecognitionResult& operator=(SpeechRecognitionResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeechRecognitionResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeechRecognitionResult* internal_default_instance() {
    return reinterpret_cast<const SpeechRecognitionResult*>(
               &_SpeechRecognitionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SpeechRecognitionResult* other);
  friend void swap(SpeechRecognitionResult& a, SpeechRecognitionResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeechRecognitionResult* New() const final {
    return CreateMaybeMessage<SpeechRecognitionResult>(NULL);
  }

  SpeechRecognitionResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeechRecognitionResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeechRecognitionResult& from);
  void MergeFrom(const SpeechRecognitionResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechRecognitionResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string transcript = 1;
  void clear_transcript();
  static const int kTranscriptFieldNumber = 1;
  const ::std::string& transcript() const;
  void set_transcript(const ::std::string& value);
  #if LANG_CXX11
  void set_transcript(::std::string&& value);
  #endif
  void set_transcript(const char* value);
  void set_transcript(const char* value, size_t size);
  ::std::string* mutable_transcript();
  ::std::string* release_transcript();
  void set_allocated_transcript(::std::string* transcript);

  // float stability = 2;
  void clear_stability();
  static const int kStabilityFieldNumber = 2;
  float stability() const;
  void set_stability(float value);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.SpeechRecognitionResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr transcript_;
  float stability_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DialogStateOut : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.DialogStateOut) */ {
 public:
  DialogStateOut();
  virtual ~DialogStateOut();

  DialogStateOut(const DialogStateOut& from);

  inline DialogStateOut& operator=(const DialogStateOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DialogStateOut(DialogStateOut&& from) noexcept
    : DialogStateOut() {
    *this = ::std::move(from);
  }

  inline DialogStateOut& operator=(DialogStateOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DialogStateOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DialogStateOut* internal_default_instance() {
    return reinterpret_cast<const DialogStateOut*>(
               &_DialogStateOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(DialogStateOut* other);
  friend void swap(DialogStateOut& a, DialogStateOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DialogStateOut* New() const final {
    return CreateMaybeMessage<DialogStateOut>(NULL);
  }

  DialogStateOut* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DialogStateOut>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DialogStateOut& from);
  void MergeFrom(const DialogStateOut& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DialogStateOut* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DialogStateOut_MicrophoneMode MicrophoneMode;
  static const MicrophoneMode MICROPHONE_MODE_UNSPECIFIED =
    DialogStateOut_MicrophoneMode_MICROPHONE_MODE_UNSPECIFIED;
  static const MicrophoneMode CLOSE_MICROPHONE =
    DialogStateOut_MicrophoneMode_CLOSE_MICROPHONE;
  static const MicrophoneMode DIALOG_FOLLOW_ON =
    DialogStateOut_MicrophoneMode_DIALOG_FOLLOW_ON;
  static inline bool MicrophoneMode_IsValid(int value) {
    return DialogStateOut_MicrophoneMode_IsValid(value);
  }
  static const MicrophoneMode MicrophoneMode_MIN =
    DialogStateOut_MicrophoneMode_MicrophoneMode_MIN;
  static const MicrophoneMode MicrophoneMode_MAX =
    DialogStateOut_MicrophoneMode_MicrophoneMode_MAX;
  static const int MicrophoneMode_ARRAYSIZE =
    DialogStateOut_MicrophoneMode_MicrophoneMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MicrophoneMode_descriptor() {
    return DialogStateOut_MicrophoneMode_descriptor();
  }
  static inline const ::std::string& MicrophoneMode_Name(MicrophoneMode value) {
    return DialogStateOut_MicrophoneMode_Name(value);
  }
  static inline bool MicrophoneMode_Parse(const ::std::string& name,
      MicrophoneMode* value) {
    return DialogStateOut_MicrophoneMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string supplemental_display_text = 1;
  void clear_supplemental_display_text();
  static const int kSupplementalDisplayTextFieldNumber = 1;
  const ::std::string& supplemental_display_text() const;
  void set_supplemental_display_text(const ::std::string& value);
  #if LANG_CXX11
  void set_supplemental_display_text(::std::string&& value);
  #endif
  void set_supplemental_display_text(const char* value);
  void set_supplemental_display_text(const char* value, size_t size);
  ::std::string* mutable_supplemental_display_text();
  ::std::string* release_supplemental_display_text();
  void set_allocated_supplemental_display_text(::std::string* supplemental_display_text);

  // bytes conversation_state = 2;
  void clear_conversation_state();
  static const int kConversationStateFieldNumber = 2;
  const ::std::string& conversation_state() const;
  void set_conversation_state(const ::std::string& value);
  #if LANG_CXX11
  void set_conversation_state(::std::string&& value);
  #endif
  void set_conversation_state(const char* value);
  void set_conversation_state(const void* value, size_t size);
  ::std::string* mutable_conversation_state();
  ::std::string* release_conversation_state();
  void set_allocated_conversation_state(::std::string* conversation_state);

  // .google.assistant.embedded.v1alpha2.DialogStateOut.MicrophoneMode microphone_mode = 3;
  void clear_microphone_mode();
  static const int kMicrophoneModeFieldNumber = 3;
  ::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode microphone_mode() const;
  void set_microphone_mode(::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode value);

  // int32 volume_percentage = 4;
  void clear_volume_percentage();
  static const int kVolumePercentageFieldNumber = 4;
  ::google::protobuf::int32 volume_percentage() const;
  void set_volume_percentage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.DialogStateOut)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr supplemental_display_text_;
  ::google::protobuf::internal::ArenaStringPtr conversation_state_;
  int microphone_mode_;
  ::google::protobuf::int32 volume_percentage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DebugConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.DebugConfig) */ {
 public:
  DebugConfig();
  virtual ~DebugConfig();

  DebugConfig(const DebugConfig& from);

  inline DebugConfig& operator=(const DebugConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugConfig(DebugConfig&& from) noexcept
    : DebugConfig() {
    *this = ::std::move(from);
  }

  inline DebugConfig& operator=(DebugConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugConfig* internal_default_instance() {
    return reinterpret_cast<const DebugConfig*>(
               &_DebugConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(DebugConfig* other);
  friend void swap(DebugConfig& a, DebugConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugConfig* New() const final {
    return CreateMaybeMessage<DebugConfig>(NULL);
  }

  DebugConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DebugConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DebugConfig& from);
  void MergeFrom(const DebugConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool return_debug_info = 6;
  void clear_return_debug_info();
  static const int kReturnDebugInfoFieldNumber = 6;
  bool return_debug_info() const;
  void set_return_debug_info(bool value);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.DebugConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool return_debug_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha2.DeviceLocation) */ {
 public:
  DeviceLocation();
  virtual ~DeviceLocation();

  DeviceLocation(const DeviceLocation& from);

  inline DeviceLocation& operator=(const DeviceLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceLocation(DeviceLocation&& from) noexcept
    : DeviceLocation() {
    *this = ::std::move(from);
  }

  inline DeviceLocation& operator=(DeviceLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceLocation& default_instance();

  enum TypeCase {
    kCoordinates = 1,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceLocation* internal_default_instance() {
    return reinterpret_cast<const DeviceLocation*>(
               &_DeviceLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(DeviceLocation* other);
  friend void swap(DeviceLocation& a, DeviceLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceLocation* New() const final {
    return CreateMaybeMessage<DeviceLocation>(NULL);
  }

  DeviceLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceLocation& from);
  void MergeFrom(const DeviceLocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.type.LatLng coordinates = 1;
  bool has_coordinates() const;
  void clear_coordinates();
  static const int kCoordinatesFieldNumber = 1;
  private:
  const ::google::type::LatLng& _internal_coordinates() const;
  public:
  const ::google::type::LatLng& coordinates() const;
  ::google::type::LatLng* release_coordinates();
  ::google::type::LatLng* mutable_coordinates();
  void set_allocated_coordinates(::google::type::LatLng* coordinates);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha2.DeviceLocation)
 private:
  void set_has_coordinates();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::google::type::LatLng* coordinates_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AssistRequest

// .google.assistant.embedded.v1alpha2.AssistConfig config = 1;
inline bool AssistRequest::has_config() const {
  return type_case() == kConfig;
}
inline void AssistRequest::set_has_config() {
  _oneof_case_[0] = kConfig;
}
inline void AssistRequest::clear_config() {
  if (has_config()) {
    delete type_.config_;
    clear_has_type();
  }
}
inline const ::google::assistant::embedded::v1alpha2::AssistConfig& AssistRequest::_internal_config() const {
  return *type_.config_;
}
inline ::google::assistant::embedded::v1alpha2::AssistConfig* AssistRequest::release_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistRequest.config)
  if (has_config()) {
    clear_has_type();
      ::google::assistant::embedded::v1alpha2::AssistConfig* temp = type_.config_;
    type_.config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::assistant::embedded::v1alpha2::AssistConfig& AssistRequest::config() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistRequest.config)
  return has_config()
      ? *type_.config_
      : *reinterpret_cast< ::google::assistant::embedded::v1alpha2::AssistConfig*>(&::google::assistant::embedded::v1alpha2::_AssistConfig_default_instance_);
}
inline ::google::assistant::embedded::v1alpha2::AssistConfig* AssistRequest::mutable_config() {
  if (!has_config()) {
    clear_type();
    set_has_config();
    type_.config_ = CreateMaybeMessage< ::google::assistant::embedded::v1alpha2::AssistConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistRequest.config)
  return type_.config_;
}

// bytes audio_in = 2;
inline bool AssistRequest::has_audio_in() const {
  return type_case() == kAudioIn;
}
inline void AssistRequest::set_has_audio_in() {
  _oneof_case_[0] = kAudioIn;
}
inline void AssistRequest::clear_audio_in() {
  if (has_audio_in()) {
    type_.audio_in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
  }
}
inline const ::std::string& AssistRequest::audio_in() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
  if (has_audio_in()) {
    return type_.audio_in_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void AssistRequest::set_audio_in(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
  if (!has_audio_in()) {
    clear_type();
    set_has_audio_in();
    type_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.audio_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
}
#if LANG_CXX11
inline void AssistRequest::set_audio_in(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
  if (!has_audio_in()) {
    clear_type();
    set_has_audio_in();
    type_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.audio_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
}
#endif
inline void AssistRequest::set_audio_in(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_audio_in()) {
    clear_type();
    set_has_audio_in();
    type_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.audio_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
}
inline void AssistRequest::set_audio_in(const void* value, size_t size) {
  if (!has_audio_in()) {
    clear_type();
    set_has_audio_in();
    type_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.audio_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
}
inline ::std::string* AssistRequest::mutable_audio_in() {
  if (!has_audio_in()) {
    clear_type();
    set_has_audio_in();
    type_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
  return type_.audio_in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssistRequest::release_audio_in() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
  if (has_audio_in()) {
    clear_has_type();
    return type_.audio_in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void AssistRequest::set_allocated_audio_in(::std::string* audio_in) {
  if (!has_audio_in()) {
    type_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_type();
  if (audio_in != NULL) {
    set_has_audio_in();
    type_.audio_in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_in);
  }
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistRequest.audio_in)
}

inline bool AssistRequest::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void AssistRequest::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline AssistRequest::TypeCase AssistRequest::type_case() const {
  return AssistRequest::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AssistResponse

// .google.assistant.embedded.v1alpha2.AssistResponse.EventType event_type = 1;
inline void AssistResponse::clear_event_type() {
  event_type_ = 0;
}
inline ::google::assistant::embedded::v1alpha2::AssistResponse_EventType AssistResponse::event_type() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistResponse.event_type)
  return static_cast< ::google::assistant::embedded::v1alpha2::AssistResponse_EventType >(event_type_);
}
inline void AssistResponse::set_event_type(::google::assistant::embedded::v1alpha2::AssistResponse_EventType value) {
  
  event_type_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AssistResponse.event_type)
}

// .google.assistant.embedded.v1alpha2.AudioOut audio_out = 3;
inline bool AssistResponse::has_audio_out() const {
  return this != internal_default_instance() && audio_out_ != NULL;
}
inline void AssistResponse::clear_audio_out() {
  if (GetArenaNoVirtual() == NULL && audio_out_ != NULL) {
    delete audio_out_;
  }
  audio_out_ = NULL;
}
inline const ::google::assistant::embedded::v1alpha2::AudioOut& AssistResponse::_internal_audio_out() const {
  return *audio_out_;
}
inline const ::google::assistant::embedded::v1alpha2::AudioOut& AssistResponse::audio_out() const {
  const ::google::assistant::embedded::v1alpha2::AudioOut* p = audio_out_;
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistResponse.audio_out)
  return p != NULL ? *p : *reinterpret_cast<const ::google::assistant::embedded::v1alpha2::AudioOut*>(
      &::google::assistant::embedded::v1alpha2::_AudioOut_default_instance_);
}
inline ::google::assistant::embedded::v1alpha2::AudioOut* AssistResponse::release_audio_out() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistResponse.audio_out)
  
  ::google::assistant::embedded::v1alpha2::AudioOut* temp = audio_out_;
  audio_out_ = NULL;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::AudioOut* AssistResponse::mutable_audio_out() {
  
  if (audio_out_ == NULL) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AudioOut>(GetArenaNoVirtual());
    audio_out_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistResponse.audio_out)
  return audio_out_;
}
inline void AssistResponse::set_allocated_audio_out(::google::assistant::embedded::v1alpha2::AudioOut* audio_out) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete audio_out_;
  }
  if (audio_out) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      audio_out = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, audio_out, submessage_arena);
    }
    
  } else {
    
  }
  audio_out_ = audio_out;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.audio_out)
}

// .google.assistant.embedded.v1alpha2.ScreenOut screen_out = 4;
inline bool AssistResponse::has_screen_out() const {
  return this != internal_default_instance() && screen_out_ != NULL;
}
inline void AssistResponse::clear_screen_out() {
  if (GetArenaNoVirtual() == NULL && screen_out_ != NULL) {
    delete screen_out_;
  }
  screen_out_ = NULL;
}
inline const ::google::assistant::embedded::v1alpha2::ScreenOut& AssistResponse::_internal_screen_out() const {
  return *screen_out_;
}
inline const ::google::assistant::embedded::v1alpha2::ScreenOut& AssistResponse::screen_out() const {
  const ::google::assistant::embedded::v1alpha2::ScreenOut* p = screen_out_;
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistResponse.screen_out)
  return p != NULL ? *p : *reinterpret_cast<const ::google::assistant::embedded::v1alpha2::ScreenOut*>(
      &::google::assistant::embedded::v1alpha2::_ScreenOut_default_instance_);
}
inline ::google::assistant::embedded::v1alpha2::ScreenOut* AssistResponse::release_screen_out() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistResponse.screen_out)
  
  ::google::assistant::embedded::v1alpha2::ScreenOut* temp = screen_out_;
  screen_out_ = NULL;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::ScreenOut* AssistResponse::mutable_screen_out() {
  
  if (screen_out_ == NULL) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::ScreenOut>(GetArenaNoVirtual());
    screen_out_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistResponse.screen_out)
  return screen_out_;
}
inline void AssistResponse::set_allocated_screen_out(::google::assistant::embedded::v1alpha2::ScreenOut* screen_out) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete screen_out_;
  }
  if (screen_out) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      screen_out = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, screen_out, submessage_arena);
    }
    
  } else {
    
  }
  screen_out_ = screen_out;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.screen_out)
}

// .google.assistant.embedded.v1alpha2.DeviceAction device_action = 6;
inline bool AssistResponse::has_device_action() const {
  return this != internal_default_instance() && device_action_ != NULL;
}
inline void AssistResponse::clear_device_action() {
  if (GetArenaNoVirtual() == NULL && device_action_ != NULL) {
    delete device_action_;
  }
  device_action_ = NULL;
}
inline const ::google::assistant::embedded::v1alpha2::DeviceAction& AssistResponse::_internal_device_action() const {
  return *device_action_;
}
inline const ::google::assistant::embedded::v1alpha2::DeviceAction& AssistResponse::device_action() const {
  const ::google::assistant::embedded::v1alpha2::DeviceAction* p = device_action_;
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistResponse.device_action)
  return p != NULL ? *p : *reinterpret_cast<const ::google::assistant::embedded::v1alpha2::DeviceAction*>(
      &::google::assistant::embedded::v1alpha2::_DeviceAction_default_instance_);
}
inline ::google::assistant::embedded::v1alpha2::DeviceAction* AssistResponse::release_device_action() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistResponse.device_action)
  
  ::google::assistant::embedded::v1alpha2::DeviceAction* temp = device_action_;
  device_action_ = NULL;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DeviceAction* AssistResponse::mutable_device_action() {
  
  if (device_action_ == NULL) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DeviceAction>(GetArenaNoVirtual());
    device_action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistResponse.device_action)
  return device_action_;
}
inline void AssistResponse::set_allocated_device_action(::google::assistant::embedded::v1alpha2::DeviceAction* device_action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_action_;
  }
  if (device_action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_action, submessage_arena);
    }
    
  } else {
    
  }
  device_action_ = device_action;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.device_action)
}

// repeated .google.assistant.embedded.v1alpha2.SpeechRecognitionResult speech_results = 2;
inline int AssistResponse::speech_results_size() const {
  return speech_results_.size();
}
inline void AssistResponse::clear_speech_results() {
  speech_results_.Clear();
}
inline ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult* AssistResponse::mutable_speech_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistResponse.speech_results)
  return speech_results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult >*
AssistResponse::mutable_speech_results() {
  // @@protoc_insertion_point(field_mutable_list:google.assistant.embedded.v1alpha2.AssistResponse.speech_results)
  return &speech_results_;
}
inline const ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult& AssistResponse::speech_results(int index) const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistResponse.speech_results)
  return speech_results_.Get(index);
}
inline ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult* AssistResponse::add_speech_results() {
  // @@protoc_insertion_point(field_add:google.assistant.embedded.v1alpha2.AssistResponse.speech_results)
  return speech_results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::assistant::embedded::v1alpha2::SpeechRecognitionResult >&
AssistResponse::speech_results() const {
  // @@protoc_insertion_point(field_list:google.assistant.embedded.v1alpha2.AssistResponse.speech_results)
  return speech_results_;
}

// .google.assistant.embedded.v1alpha2.DialogStateOut dialog_state_out = 5;
inline bool AssistResponse::has_dialog_state_out() const {
  return this != internal_default_instance() && dialog_state_out_ != NULL;
}
inline void AssistResponse::clear_dialog_state_out() {
  if (GetArenaNoVirtual() == NULL && dialog_state_out_ != NULL) {
    delete dialog_state_out_;
  }
  dialog_state_out_ = NULL;
}
inline const ::google::assistant::embedded::v1alpha2::DialogStateOut& AssistResponse::_internal_dialog_state_out() const {
  return *dialog_state_out_;
}
inline const ::google::assistant::embedded::v1alpha2::DialogStateOut& AssistResponse::dialog_state_out() const {
  const ::google::assistant::embedded::v1alpha2::DialogStateOut* p = dialog_state_out_;
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistResponse.dialog_state_out)
  return p != NULL ? *p : *reinterpret_cast<const ::google::assistant::embedded::v1alpha2::DialogStateOut*>(
      &::google::assistant::embedded::v1alpha2::_DialogStateOut_default_instance_);
}
inline ::google::assistant::embedded::v1alpha2::DialogStateOut* AssistResponse::release_dialog_state_out() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistResponse.dialog_state_out)
  
  ::google::assistant::embedded::v1alpha2::DialogStateOut* temp = dialog_state_out_;
  dialog_state_out_ = NULL;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DialogStateOut* AssistResponse::mutable_dialog_state_out() {
  
  if (dialog_state_out_ == NULL) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DialogStateOut>(GetArenaNoVirtual());
    dialog_state_out_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistResponse.dialog_state_out)
  return dialog_state_out_;
}
inline void AssistResponse::set_allocated_dialog_state_out(::google::assistant::embedded::v1alpha2::DialogStateOut* dialog_state_out) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dialog_state_out_;
  }
  if (dialog_state_out) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dialog_state_out = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dialog_state_out, submessage_arena);
    }
    
  } else {
    
  }
  dialog_state_out_ = dialog_state_out;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.dialog_state_out)
}

// .google.assistant.embedded.v1alpha2.DebugInfo debug_info = 8;
inline bool AssistResponse::has_debug_info() const {
  return this != internal_default_instance() && debug_info_ != NULL;
}
inline void AssistResponse::clear_debug_info() {
  if (GetArenaNoVirtual() == NULL && debug_info_ != NULL) {
    delete debug_info_;
  }
  debug_info_ = NULL;
}
inline const ::google::assistant::embedded::v1alpha2::DebugInfo& AssistResponse::_internal_debug_info() const {
  return *debug_info_;
}
inline const ::google::assistant::embedded::v1alpha2::DebugInfo& AssistResponse::debug_info() const {
  const ::google::assistant::embedded::v1alpha2::DebugInfo* p = debug_info_;
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistResponse.debug_info)
  return p != NULL ? *p : *reinterpret_cast<const ::google::assistant::embedded::v1alpha2::DebugInfo*>(
      &::google::assistant::embedded::v1alpha2::_DebugInfo_default_instance_);
}
inline ::google::assistant::embedded::v1alpha2::DebugInfo* AssistResponse::release_debug_info() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistResponse.debug_info)
  
  ::google::assistant::embedded::v1alpha2::DebugInfo* temp = debug_info_;
  debug_info_ = NULL;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DebugInfo* AssistResponse::mutable_debug_info() {
  
  if (debug_info_ == NULL) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DebugInfo>(GetArenaNoVirtual());
    debug_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistResponse.debug_info)
  return debug_info_;
}
inline void AssistResponse::set_allocated_debug_info(::google::assistant::embedded::v1alpha2::DebugInfo* debug_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete debug_info_;
  }
  if (debug_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      debug_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, debug_info, submessage_arena);
    }
    
  } else {
    
  }
  debug_info_ = debug_info;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistResponse.debug_info)
}

// -------------------------------------------------------------------

// DebugInfo

// string aog_agent_to_assistant_json = 1;
inline void DebugInfo::clear_aog_agent_to_assistant_json() {
  aog_agent_to_assistant_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DebugInfo::aog_agent_to_assistant_json() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DebugInfo.aog_agent_to_assistant_json)
  return aog_agent_to_assistant_json_.GetNoArena();
}
inline void DebugInfo::set_aog_agent_to_assistant_json(const ::std::string& value) {
  
  aog_agent_to_assistant_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DebugInfo.aog_agent_to_assistant_json)
}
#if LANG_CXX11
inline void DebugInfo::set_aog_agent_to_assistant_json(::std::string&& value) {
  
  aog_agent_to_assistant_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha2.DebugInfo.aog_agent_to_assistant_json)
}
#endif
inline void DebugInfo::set_aog_agent_to_assistant_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  aog_agent_to_assistant_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha2.DebugInfo.aog_agent_to_assistant_json)
}
inline void DebugInfo::set_aog_agent_to_assistant_json(const char* value, size_t size) {
  
  aog_agent_to_assistant_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha2.DebugInfo.aog_agent_to_assistant_json)
}
inline ::std::string* DebugInfo::mutable_aog_agent_to_assistant_json() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DebugInfo.aog_agent_to_assistant_json)
  return aog_agent_to_assistant_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DebugInfo::release_aog_agent_to_assistant_json() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DebugInfo.aog_agent_to_assistant_json)
  
  return aog_agent_to_assistant_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DebugInfo::set_allocated_aog_agent_to_assistant_json(::std::string* aog_agent_to_assistant_json) {
  if (aog_agent_to_assistant_json != NULL) {
    
  } else {
    
  }
  aog_agent_to_assistant_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aog_agent_to_assistant_json);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DebugInfo.aog_agent_to_assistant_json)
}

// -------------------------------------------------------------------

// AssistConfig

// .google.assistant.embedded.v1alpha2.AudioInConfig audio_in_config = 1;
inline bool AssistConfig::has_audio_in_config() const {
  return type_case() == kAudioInConfig;
}
inline void AssistConfig::set_has_audio_in_config() {
  _oneof_case_[0] = kAudioInConfig;
}
inline void AssistConfig::clear_audio_in_config() {
  if (has_audio_in_config()) {
    delete type_.audio_in_config_;
    clear_has_type();
  }
}
inline const ::google::assistant::embedded::v1alpha2::AudioInConfig& AssistConfig::_internal_audio_in_config() const {
  return *type_.audio_in_config_;
}
inline ::google::assistant::embedded::v1alpha2::AudioInConfig* AssistConfig::release_audio_in_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistConfig.audio_in_config)
  if (has_audio_in_config()) {
    clear_has_type();
      ::google::assistant::embedded::v1alpha2::AudioInConfig* temp = type_.audio_in_config_;
    type_.audio_in_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::assistant::embedded::v1alpha2::AudioInConfig& AssistConfig::audio_in_config() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistConfig.audio_in_config)
  return has_audio_in_config()
      ? *type_.audio_in_config_
      : *reinterpret_cast< ::google::assistant::embedded::v1alpha2::AudioInConfig*>(&::google::assistant::embedded::v1alpha2::_AudioInConfig_default_instance_);
}
inline ::google::assistant::embedded::v1alpha2::AudioInConfig* AssistConfig::mutable_audio_in_config() {
  if (!has_audio_in_config()) {
    clear_type();
    set_has_audio_in_config();
    type_.audio_in_config_ = CreateMaybeMessage< ::google::assistant::embedded::v1alpha2::AudioInConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistConfig.audio_in_config)
  return type_.audio_in_config_;
}

// string text_query = 6;
inline bool AssistConfig::has_text_query() const {
  return type_case() == kTextQuery;
}
inline void AssistConfig::set_has_text_query() {
  _oneof_case_[0] = kTextQuery;
}
inline void AssistConfig::clear_text_query() {
  if (has_text_query()) {
    type_.text_query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
  }
}
inline const ::std::string& AssistConfig::text_query() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
  if (has_text_query()) {
    return type_.text_query_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void AssistConfig::set_text_query(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
  if (!has_text_query()) {
    clear_type();
    set_has_text_query();
    type_.text_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.text_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
}
#if LANG_CXX11
inline void AssistConfig::set_text_query(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
  if (!has_text_query()) {
    clear_type();
    set_has_text_query();
    type_.text_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.text_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
}
#endif
inline void AssistConfig::set_text_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_text_query()) {
    clear_type();
    set_has_text_query();
    type_.text_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.text_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
}
inline void AssistConfig::set_text_query(const char* value, size_t size) {
  if (!has_text_query()) {
    clear_type();
    set_has_text_query();
    type_.text_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.text_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
}
inline ::std::string* AssistConfig::mutable_text_query() {
  if (!has_text_query()) {
    clear_type();
    set_has_text_query();
    type_.text_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
  return type_.text_query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssistConfig::release_text_query() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
  if (has_text_query()) {
    clear_has_type();
    return type_.text_query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void AssistConfig::set_allocated_text_query(::std::string* text_query) {
  if (!has_text_query()) {
    type_.text_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_type();
  if (text_query != NULL) {
    set_has_text_query();
    type_.text_query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_query);
  }
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.text_query)
}

// .google.assistant.embedded.v1alpha2.AudioOutConfig audio_out_config = 2;
inline bool AssistConfig::has_audio_out_config() const {
  return this != internal_default_instance() && audio_out_config_ != NULL;
}
inline void AssistConfig::clear_audio_out_config() {
  if (GetArenaNoVirtual() == NULL && audio_out_config_ != NULL) {
    delete audio_out_config_;
  }
  audio_out_config_ = NULL;
}
inline const ::google::assistant::embedded::v1alpha2::AudioOutConfig& AssistConfig::_internal_audio_out_config() const {
  return *audio_out_config_;
}
inline const ::google::assistant::embedded::v1alpha2::AudioOutConfig& AssistConfig::audio_out_config() const {
  const ::google::assistant::embedded::v1alpha2::AudioOutConfig* p = audio_out_config_;
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistConfig.audio_out_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::assistant::embedded::v1alpha2::AudioOutConfig*>(
      &::google::assistant::embedded::v1alpha2::_AudioOutConfig_default_instance_);
}
inline ::google::assistant::embedded::v1alpha2::AudioOutConfig* AssistConfig::release_audio_out_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistConfig.audio_out_config)
  
  ::google::assistant::embedded::v1alpha2::AudioOutConfig* temp = audio_out_config_;
  audio_out_config_ = NULL;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::AudioOutConfig* AssistConfig::mutable_audio_out_config() {
  
  if (audio_out_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::AudioOutConfig>(GetArenaNoVirtual());
    audio_out_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistConfig.audio_out_config)
  return audio_out_config_;
}
inline void AssistConfig::set_allocated_audio_out_config(::google::assistant::embedded::v1alpha2::AudioOutConfig* audio_out_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete audio_out_config_;
  }
  if (audio_out_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      audio_out_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, audio_out_config, submessage_arena);
    }
    
  } else {
    
  }
  audio_out_config_ = audio_out_config;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.audio_out_config)
}

// .google.assistant.embedded.v1alpha2.ScreenOutConfig screen_out_config = 8;
inline bool AssistConfig::has_screen_out_config() const {
  return this != internal_default_instance() && screen_out_config_ != NULL;
}
inline void AssistConfig::clear_screen_out_config() {
  if (GetArenaNoVirtual() == NULL && screen_out_config_ != NULL) {
    delete screen_out_config_;
  }
  screen_out_config_ = NULL;
}
inline const ::google::assistant::embedded::v1alpha2::ScreenOutConfig& AssistConfig::_internal_screen_out_config() const {
  return *screen_out_config_;
}
inline const ::google::assistant::embedded::v1alpha2::ScreenOutConfig& AssistConfig::screen_out_config() const {
  const ::google::assistant::embedded::v1alpha2::ScreenOutConfig* p = screen_out_config_;
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistConfig.screen_out_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::assistant::embedded::v1alpha2::ScreenOutConfig*>(
      &::google::assistant::embedded::v1alpha2::_ScreenOutConfig_default_instance_);
}
inline ::google::assistant::embedded::v1alpha2::ScreenOutConfig* AssistConfig::release_screen_out_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistConfig.screen_out_config)
  
  ::google::assistant::embedded::v1alpha2::ScreenOutConfig* temp = screen_out_config_;
  screen_out_config_ = NULL;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::ScreenOutConfig* AssistConfig::mutable_screen_out_config() {
  
  if (screen_out_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::ScreenOutConfig>(GetArenaNoVirtual());
    screen_out_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistConfig.screen_out_config)
  return screen_out_config_;
}
inline void AssistConfig::set_allocated_screen_out_config(::google::assistant::embedded::v1alpha2::ScreenOutConfig* screen_out_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete screen_out_config_;
  }
  if (screen_out_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      screen_out_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, screen_out_config, submessage_arena);
    }
    
  } else {
    
  }
  screen_out_config_ = screen_out_config;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.screen_out_config)
}

// .google.assistant.embedded.v1alpha2.DialogStateIn dialog_state_in = 3;
inline bool AssistConfig::has_dialog_state_in() const {
  return this != internal_default_instance() && dialog_state_in_ != NULL;
}
inline void AssistConfig::clear_dialog_state_in() {
  if (GetArenaNoVirtual() == NULL && dialog_state_in_ != NULL) {
    delete dialog_state_in_;
  }
  dialog_state_in_ = NULL;
}
inline const ::google::assistant::embedded::v1alpha2::DialogStateIn& AssistConfig::_internal_dialog_state_in() const {
  return *dialog_state_in_;
}
inline const ::google::assistant::embedded::v1alpha2::DialogStateIn& AssistConfig::dialog_state_in() const {
  const ::google::assistant::embedded::v1alpha2::DialogStateIn* p = dialog_state_in_;
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistConfig.dialog_state_in)
  return p != NULL ? *p : *reinterpret_cast<const ::google::assistant::embedded::v1alpha2::DialogStateIn*>(
      &::google::assistant::embedded::v1alpha2::_DialogStateIn_default_instance_);
}
inline ::google::assistant::embedded::v1alpha2::DialogStateIn* AssistConfig::release_dialog_state_in() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistConfig.dialog_state_in)
  
  ::google::assistant::embedded::v1alpha2::DialogStateIn* temp = dialog_state_in_;
  dialog_state_in_ = NULL;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DialogStateIn* AssistConfig::mutable_dialog_state_in() {
  
  if (dialog_state_in_ == NULL) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DialogStateIn>(GetArenaNoVirtual());
    dialog_state_in_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistConfig.dialog_state_in)
  return dialog_state_in_;
}
inline void AssistConfig::set_allocated_dialog_state_in(::google::assistant::embedded::v1alpha2::DialogStateIn* dialog_state_in) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dialog_state_in_;
  }
  if (dialog_state_in) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dialog_state_in = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dialog_state_in, submessage_arena);
    }
    
  } else {
    
  }
  dialog_state_in_ = dialog_state_in;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.dialog_state_in)
}

// .google.assistant.embedded.v1alpha2.DeviceConfig device_config = 4;
inline bool AssistConfig::has_device_config() const {
  return this != internal_default_instance() && device_config_ != NULL;
}
inline void AssistConfig::clear_device_config() {
  if (GetArenaNoVirtual() == NULL && device_config_ != NULL) {
    delete device_config_;
  }
  device_config_ = NULL;
}
inline const ::google::assistant::embedded::v1alpha2::DeviceConfig& AssistConfig::_internal_device_config() const {
  return *device_config_;
}
inline const ::google::assistant::embedded::v1alpha2::DeviceConfig& AssistConfig::device_config() const {
  const ::google::assistant::embedded::v1alpha2::DeviceConfig* p = device_config_;
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistConfig.device_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::assistant::embedded::v1alpha2::DeviceConfig*>(
      &::google::assistant::embedded::v1alpha2::_DeviceConfig_default_instance_);
}
inline ::google::assistant::embedded::v1alpha2::DeviceConfig* AssistConfig::release_device_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistConfig.device_config)
  
  ::google::assistant::embedded::v1alpha2::DeviceConfig* temp = device_config_;
  device_config_ = NULL;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DeviceConfig* AssistConfig::mutable_device_config() {
  
  if (device_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DeviceConfig>(GetArenaNoVirtual());
    device_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistConfig.device_config)
  return device_config_;
}
inline void AssistConfig::set_allocated_device_config(::google::assistant::embedded::v1alpha2::DeviceConfig* device_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_config_;
  }
  if (device_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_config, submessage_arena);
    }
    
  } else {
    
  }
  device_config_ = device_config;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.device_config)
}

// .google.assistant.embedded.v1alpha2.DebugConfig debug_config = 5;
inline bool AssistConfig::has_debug_config() const {
  return this != internal_default_instance() && debug_config_ != NULL;
}
inline void AssistConfig::clear_debug_config() {
  if (GetArenaNoVirtual() == NULL && debug_config_ != NULL) {
    delete debug_config_;
  }
  debug_config_ = NULL;
}
inline const ::google::assistant::embedded::v1alpha2::DebugConfig& AssistConfig::_internal_debug_config() const {
  return *debug_config_;
}
inline const ::google::assistant::embedded::v1alpha2::DebugConfig& AssistConfig::debug_config() const {
  const ::google::assistant::embedded::v1alpha2::DebugConfig* p = debug_config_;
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AssistConfig.debug_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::assistant::embedded::v1alpha2::DebugConfig*>(
      &::google::assistant::embedded::v1alpha2::_DebugConfig_default_instance_);
}
inline ::google::assistant::embedded::v1alpha2::DebugConfig* AssistConfig::release_debug_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AssistConfig.debug_config)
  
  ::google::assistant::embedded::v1alpha2::DebugConfig* temp = debug_config_;
  debug_config_ = NULL;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DebugConfig* AssistConfig::mutable_debug_config() {
  
  if (debug_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DebugConfig>(GetArenaNoVirtual());
    debug_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AssistConfig.debug_config)
  return debug_config_;
}
inline void AssistConfig::set_allocated_debug_config(::google::assistant::embedded::v1alpha2::DebugConfig* debug_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete debug_config_;
  }
  if (debug_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      debug_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, debug_config, submessage_arena);
    }
    
  } else {
    
  }
  debug_config_ = debug_config;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AssistConfig.debug_config)
}

inline bool AssistConfig::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void AssistConfig::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline AssistConfig::TypeCase AssistConfig::type_case() const {
  return AssistConfig::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AudioInConfig

// .google.assistant.embedded.v1alpha2.AudioInConfig.Encoding encoding = 1;
inline void AudioInConfig::clear_encoding() {
  encoding_ = 0;
}
inline ::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding AudioInConfig::encoding() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AudioInConfig.encoding)
  return static_cast< ::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding >(encoding_);
}
inline void AudioInConfig::set_encoding(::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AudioInConfig.encoding)
}

// int32 sample_rate_hertz = 2;
inline void AudioInConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::google::protobuf::int32 AudioInConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AudioInConfig.sample_rate_hertz)
  return sample_rate_hertz_;
}
inline void AudioInConfig::set_sample_rate_hertz(::google::protobuf::int32 value) {
  
  sample_rate_hertz_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AudioInConfig.sample_rate_hertz)
}

// -------------------------------------------------------------------

// AudioOutConfig

// .google.assistant.embedded.v1alpha2.AudioOutConfig.Encoding encoding = 1;
inline void AudioOutConfig::clear_encoding() {
  encoding_ = 0;
}
inline ::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding AudioOutConfig::encoding() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AudioOutConfig.encoding)
  return static_cast< ::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding >(encoding_);
}
inline void AudioOutConfig::set_encoding(::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AudioOutConfig.encoding)
}

// int32 sample_rate_hertz = 2;
inline void AudioOutConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::google::protobuf::int32 AudioOutConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AudioOutConfig.sample_rate_hertz)
  return sample_rate_hertz_;
}
inline void AudioOutConfig::set_sample_rate_hertz(::google::protobuf::int32 value) {
  
  sample_rate_hertz_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AudioOutConfig.sample_rate_hertz)
}

// int32 volume_percentage = 3;
inline void AudioOutConfig::clear_volume_percentage() {
  volume_percentage_ = 0;
}
inline ::google::protobuf::int32 AudioOutConfig::volume_percentage() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AudioOutConfig.volume_percentage)
  return volume_percentage_;
}
inline void AudioOutConfig::set_volume_percentage(::google::protobuf::int32 value) {
  
  volume_percentage_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AudioOutConfig.volume_percentage)
}

// -------------------------------------------------------------------

// ScreenOutConfig

// .google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;
inline void ScreenOutConfig::clear_screen_mode() {
  screen_mode_ = 0;
}
inline ::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode ScreenOutConfig::screen_mode() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.ScreenOutConfig.screen_mode)
  return static_cast< ::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode >(screen_mode_);
}
inline void ScreenOutConfig::set_screen_mode(::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode value) {
  
  screen_mode_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.ScreenOutConfig.screen_mode)
}

// -------------------------------------------------------------------

// DialogStateIn

// bytes conversation_state = 1;
inline void DialogStateIn::clear_conversation_state() {
  conversation_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DialogStateIn::conversation_state() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateIn.conversation_state)
  return conversation_state_.GetNoArena();
}
inline void DialogStateIn::set_conversation_state(const ::std::string& value) {
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DialogStateIn.conversation_state)
}
#if LANG_CXX11
inline void DialogStateIn::set_conversation_state(::std::string&& value) {
  
  conversation_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha2.DialogStateIn.conversation_state)
}
#endif
inline void DialogStateIn::set_conversation_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha2.DialogStateIn.conversation_state)
}
inline void DialogStateIn::set_conversation_state(const void* value, size_t size) {
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha2.DialogStateIn.conversation_state)
}
inline ::std::string* DialogStateIn::mutable_conversation_state() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DialogStateIn.conversation_state)
  return conversation_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DialogStateIn::release_conversation_state() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DialogStateIn.conversation_state)
  
  return conversation_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DialogStateIn::set_allocated_conversation_state(::std::string* conversation_state) {
  if (conversation_state != NULL) {
    
  } else {
    
  }
  conversation_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conversation_state);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DialogStateIn.conversation_state)
}

// string language_code = 2;
inline void DialogStateIn::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DialogStateIn::language_code() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateIn.language_code)
  return language_code_.GetNoArena();
}
inline void DialogStateIn::set_language_code(const ::std::string& value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DialogStateIn.language_code)
}
#if LANG_CXX11
inline void DialogStateIn::set_language_code(::std::string&& value) {
  
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha2.DialogStateIn.language_code)
}
#endif
inline void DialogStateIn::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha2.DialogStateIn.language_code)
}
inline void DialogStateIn::set_language_code(const char* value, size_t size) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha2.DialogStateIn.language_code)
}
inline ::std::string* DialogStateIn::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DialogStateIn.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DialogStateIn::release_language_code() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DialogStateIn.language_code)
  
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DialogStateIn::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DialogStateIn.language_code)
}

// .google.assistant.embedded.v1alpha2.DeviceLocation device_location = 5;
inline bool DialogStateIn::has_device_location() const {
  return this != internal_default_instance() && device_location_ != NULL;
}
inline void DialogStateIn::clear_device_location() {
  if (GetArenaNoVirtual() == NULL && device_location_ != NULL) {
    delete device_location_;
  }
  device_location_ = NULL;
}
inline const ::google::assistant::embedded::v1alpha2::DeviceLocation& DialogStateIn::_internal_device_location() const {
  return *device_location_;
}
inline const ::google::assistant::embedded::v1alpha2::DeviceLocation& DialogStateIn::device_location() const {
  const ::google::assistant::embedded::v1alpha2::DeviceLocation* p = device_location_;
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateIn.device_location)
  return p != NULL ? *p : *reinterpret_cast<const ::google::assistant::embedded::v1alpha2::DeviceLocation*>(
      &::google::assistant::embedded::v1alpha2::_DeviceLocation_default_instance_);
}
inline ::google::assistant::embedded::v1alpha2::DeviceLocation* DialogStateIn::release_device_location() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DialogStateIn.device_location)
  
  ::google::assistant::embedded::v1alpha2::DeviceLocation* temp = device_location_;
  device_location_ = NULL;
  return temp;
}
inline ::google::assistant::embedded::v1alpha2::DeviceLocation* DialogStateIn::mutable_device_location() {
  
  if (device_location_ == NULL) {
    auto* p = CreateMaybeMessage<::google::assistant::embedded::v1alpha2::DeviceLocation>(GetArenaNoVirtual());
    device_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DialogStateIn.device_location)
  return device_location_;
}
inline void DialogStateIn::set_allocated_device_location(::google::assistant::embedded::v1alpha2::DeviceLocation* device_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_location_;
  }
  if (device_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_location, submessage_arena);
    }
    
  } else {
    
  }
  device_location_ = device_location;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DialogStateIn.device_location)
}

// bool is_new_conversation = 7;
inline void DialogStateIn::clear_is_new_conversation() {
  is_new_conversation_ = false;
}
inline bool DialogStateIn::is_new_conversation() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateIn.is_new_conversation)
  return is_new_conversation_;
}
inline void DialogStateIn::set_is_new_conversation(bool value) {
  
  is_new_conversation_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DialogStateIn.is_new_conversation)
}

// -------------------------------------------------------------------

// DeviceConfig

// string device_id = 1;
inline void DeviceConfig::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceConfig::device_id() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DeviceConfig.device_id)
  return device_id_.GetNoArena();
}
inline void DeviceConfig::set_device_id(const ::std::string& value) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DeviceConfig.device_id)
}
#if LANG_CXX11
inline void DeviceConfig::set_device_id(::std::string&& value) {
  
  device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha2.DeviceConfig.device_id)
}
#endif
inline void DeviceConfig::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha2.DeviceConfig.device_id)
}
inline void DeviceConfig::set_device_id(const char* value, size_t size) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha2.DeviceConfig.device_id)
}
inline ::std::string* DeviceConfig::mutable_device_id() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DeviceConfig.device_id)
  return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceConfig::release_device_id() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DeviceConfig.device_id)
  
  return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceConfig::set_allocated_device_id(::std::string* device_id) {
  if (device_id != NULL) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DeviceConfig.device_id)
}

// string device_model_id = 3;
inline void DeviceConfig::clear_device_model_id() {
  device_model_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceConfig::device_model_id() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DeviceConfig.device_model_id)
  return device_model_id_.GetNoArena();
}
inline void DeviceConfig::set_device_model_id(const ::std::string& value) {
  
  device_model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DeviceConfig.device_model_id)
}
#if LANG_CXX11
inline void DeviceConfig::set_device_model_id(::std::string&& value) {
  
  device_model_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha2.DeviceConfig.device_model_id)
}
#endif
inline void DeviceConfig::set_device_model_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha2.DeviceConfig.device_model_id)
}
inline void DeviceConfig::set_device_model_id(const char* value, size_t size) {
  
  device_model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha2.DeviceConfig.device_model_id)
}
inline ::std::string* DeviceConfig::mutable_device_model_id() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DeviceConfig.device_model_id)
  return device_model_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceConfig::release_device_model_id() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DeviceConfig.device_model_id)
  
  return device_model_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceConfig::set_allocated_device_model_id(::std::string* device_model_id) {
  if (device_model_id != NULL) {
    
  } else {
    
  }
  device_model_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_model_id);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DeviceConfig.device_model_id)
}

// -------------------------------------------------------------------

// AudioOut

// bytes audio_data = 1;
inline void AudioOut::clear_audio_data() {
  audio_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioOut::audio_data() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.AudioOut.audio_data)
  return audio_data_.GetNoArena();
}
inline void AudioOut::set_audio_data(const ::std::string& value) {
  
  audio_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.AudioOut.audio_data)
}
#if LANG_CXX11
inline void AudioOut::set_audio_data(::std::string&& value) {
  
  audio_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha2.AudioOut.audio_data)
}
#endif
inline void AudioOut::set_audio_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  audio_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha2.AudioOut.audio_data)
}
inline void AudioOut::set_audio_data(const void* value, size_t size) {
  
  audio_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha2.AudioOut.audio_data)
}
inline ::std::string* AudioOut::mutable_audio_data() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.AudioOut.audio_data)
  return audio_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioOut::release_audio_data() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.AudioOut.audio_data)
  
  return audio_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioOut::set_allocated_audio_data(::std::string* audio_data) {
  if (audio_data != NULL) {
    
  } else {
    
  }
  audio_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_data);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.AudioOut.audio_data)
}

// -------------------------------------------------------------------

// ScreenOut

// .google.assistant.embedded.v1alpha2.ScreenOut.Format format = 1;
inline void ScreenOut::clear_format() {
  format_ = 0;
}
inline ::google::assistant::embedded::v1alpha2::ScreenOut_Format ScreenOut::format() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.ScreenOut.format)
  return static_cast< ::google::assistant::embedded::v1alpha2::ScreenOut_Format >(format_);
}
inline void ScreenOut::set_format(::google::assistant::embedded::v1alpha2::ScreenOut_Format value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.ScreenOut.format)
}

// bytes data = 2;
inline void ScreenOut::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScreenOut::data() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.ScreenOut.data)
  return data_.GetNoArena();
}
inline void ScreenOut::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.ScreenOut.data)
}
#if LANG_CXX11
inline void ScreenOut::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha2.ScreenOut.data)
}
#endif
inline void ScreenOut::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha2.ScreenOut.data)
}
inline void ScreenOut::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha2.ScreenOut.data)
}
inline ::std::string* ScreenOut::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.ScreenOut.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScreenOut::release_data() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.ScreenOut.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScreenOut::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.ScreenOut.data)
}

// -------------------------------------------------------------------

// DeviceAction

// string device_request_json = 1;
inline void DeviceAction::clear_device_request_json() {
  device_request_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceAction::device_request_json() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DeviceAction.device_request_json)
  return device_request_json_.GetNoArena();
}
inline void DeviceAction::set_device_request_json(const ::std::string& value) {
  
  device_request_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DeviceAction.device_request_json)
}
#if LANG_CXX11
inline void DeviceAction::set_device_request_json(::std::string&& value) {
  
  device_request_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha2.DeviceAction.device_request_json)
}
#endif
inline void DeviceAction::set_device_request_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_request_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha2.DeviceAction.device_request_json)
}
inline void DeviceAction::set_device_request_json(const char* value, size_t size) {
  
  device_request_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha2.DeviceAction.device_request_json)
}
inline ::std::string* DeviceAction::mutable_device_request_json() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DeviceAction.device_request_json)
  return device_request_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceAction::release_device_request_json() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DeviceAction.device_request_json)
  
  return device_request_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAction::set_allocated_device_request_json(::std::string* device_request_json) {
  if (device_request_json != NULL) {
    
  } else {
    
  }
  device_request_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_request_json);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DeviceAction.device_request_json)
}

// -------------------------------------------------------------------

// SpeechRecognitionResult

// string transcript = 1;
inline void SpeechRecognitionResult::clear_transcript() {
  transcript_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpeechRecognitionResult::transcript() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.transcript)
  return transcript_.GetNoArena();
}
inline void SpeechRecognitionResult::set_transcript(const ::std::string& value) {
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.transcript)
}
#if LANG_CXX11
inline void SpeechRecognitionResult::set_transcript(::std::string&& value) {
  
  transcript_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.transcript)
}
#endif
inline void SpeechRecognitionResult::set_transcript(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.transcript)
}
inline void SpeechRecognitionResult::set_transcript(const char* value, size_t size) {
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.transcript)
}
inline ::std::string* SpeechRecognitionResult::mutable_transcript() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.transcript)
  return transcript_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpeechRecognitionResult::release_transcript() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.transcript)
  
  return transcript_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpeechRecognitionResult::set_allocated_transcript(::std::string* transcript) {
  if (transcript != NULL) {
    
  } else {
    
  }
  transcript_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transcript);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.transcript)
}

// float stability = 2;
inline void SpeechRecognitionResult::clear_stability() {
  stability_ = 0;
}
inline float SpeechRecognitionResult::stability() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.stability)
  return stability_;
}
inline void SpeechRecognitionResult::set_stability(float value) {
  
  stability_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.SpeechRecognitionResult.stability)
}

// -------------------------------------------------------------------

// DialogStateOut

// string supplemental_display_text = 1;
inline void DialogStateOut::clear_supplemental_display_text() {
  supplemental_display_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DialogStateOut::supplemental_display_text() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateOut.supplemental_display_text)
  return supplemental_display_text_.GetNoArena();
}
inline void DialogStateOut::set_supplemental_display_text(const ::std::string& value) {
  
  supplemental_display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DialogStateOut.supplemental_display_text)
}
#if LANG_CXX11
inline void DialogStateOut::set_supplemental_display_text(::std::string&& value) {
  
  supplemental_display_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha2.DialogStateOut.supplemental_display_text)
}
#endif
inline void DialogStateOut::set_supplemental_display_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  supplemental_display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha2.DialogStateOut.supplemental_display_text)
}
inline void DialogStateOut::set_supplemental_display_text(const char* value, size_t size) {
  
  supplemental_display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha2.DialogStateOut.supplemental_display_text)
}
inline ::std::string* DialogStateOut::mutable_supplemental_display_text() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DialogStateOut.supplemental_display_text)
  return supplemental_display_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DialogStateOut::release_supplemental_display_text() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DialogStateOut.supplemental_display_text)
  
  return supplemental_display_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DialogStateOut::set_allocated_supplemental_display_text(::std::string* supplemental_display_text) {
  if (supplemental_display_text != NULL) {
    
  } else {
    
  }
  supplemental_display_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), supplemental_display_text);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DialogStateOut.supplemental_display_text)
}

// bytes conversation_state = 2;
inline void DialogStateOut::clear_conversation_state() {
  conversation_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DialogStateOut::conversation_state() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state)
  return conversation_state_.GetNoArena();
}
inline void DialogStateOut::set_conversation_state(const ::std::string& value) {
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state)
}
#if LANG_CXX11
inline void DialogStateOut::set_conversation_state(::std::string&& value) {
  
  conversation_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state)
}
#endif
inline void DialogStateOut::set_conversation_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state)
}
inline void DialogStateOut::set_conversation_state(const void* value, size_t size) {
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state)
}
inline ::std::string* DialogStateOut::mutable_conversation_state() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state)
  return conversation_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DialogStateOut::release_conversation_state() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state)
  
  return conversation_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DialogStateOut::set_allocated_conversation_state(::std::string* conversation_state) {
  if (conversation_state != NULL) {
    
  } else {
    
  }
  conversation_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conversation_state);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state)
}

// .google.assistant.embedded.v1alpha2.DialogStateOut.MicrophoneMode microphone_mode = 3;
inline void DialogStateOut::clear_microphone_mode() {
  microphone_mode_ = 0;
}
inline ::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode DialogStateOut::microphone_mode() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateOut.microphone_mode)
  return static_cast< ::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode >(microphone_mode_);
}
inline void DialogStateOut::set_microphone_mode(::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode value) {
  
  microphone_mode_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DialogStateOut.microphone_mode)
}

// int32 volume_percentage = 4;
inline void DialogStateOut::clear_volume_percentage() {
  volume_percentage_ = 0;
}
inline ::google::protobuf::int32 DialogStateOut::volume_percentage() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DialogStateOut.volume_percentage)
  return volume_percentage_;
}
inline void DialogStateOut::set_volume_percentage(::google::protobuf::int32 value) {
  
  volume_percentage_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DialogStateOut.volume_percentage)
}

// -------------------------------------------------------------------

// DebugConfig

// bool return_debug_info = 6;
inline void DebugConfig::clear_return_debug_info() {
  return_debug_info_ = false;
}
inline bool DebugConfig::return_debug_info() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DebugConfig.return_debug_info)
  return return_debug_info_;
}
inline void DebugConfig::set_return_debug_info(bool value) {
  
  return_debug_info_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha2.DebugConfig.return_debug_info)
}

// -------------------------------------------------------------------

// DeviceLocation

// .google.type.LatLng coordinates = 1;
inline bool DeviceLocation::has_coordinates() const {
  return type_case() == kCoordinates;
}
inline void DeviceLocation::set_has_coordinates() {
  _oneof_case_[0] = kCoordinates;
}
inline const ::google::type::LatLng& DeviceLocation::_internal_coordinates() const {
  return *type_.coordinates_;
}
inline ::google::type::LatLng* DeviceLocation::release_coordinates() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha2.DeviceLocation.coordinates)
  if (has_coordinates()) {
    clear_has_type();
      ::google::type::LatLng* temp = type_.coordinates_;
    type_.coordinates_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::type::LatLng& DeviceLocation::coordinates() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha2.DeviceLocation.coordinates)
  return has_coordinates()
      ? *type_.coordinates_
      : *reinterpret_cast< ::google::type::LatLng*>(&::google::type::_LatLng_default_instance_);
}
inline ::google::type::LatLng* DeviceLocation::mutable_coordinates() {
  if (!has_coordinates()) {
    clear_type();
    set_has_coordinates();
    type_.coordinates_ = CreateMaybeMessage< ::google::type::LatLng >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha2.DeviceLocation.coordinates)
  return type_.coordinates_;
}

inline bool DeviceLocation::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void DeviceLocation::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline DeviceLocation::TypeCase DeviceLocation::type_case() const {
  return DeviceLocation::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha2
}  // namespace embedded
}  // namespace assistant
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha2::AssistResponse_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha2::AssistResponse_EventType>() {
  return ::google::assistant::embedded::v1alpha2::AssistResponse_EventType_descriptor();
}
template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding>() {
  return ::google::assistant::embedded::v1alpha2::AudioInConfig_Encoding_descriptor();
}
template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding>() {
  return ::google::assistant::embedded::v1alpha2::AudioOutConfig_Encoding_descriptor();
}
template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode>() {
  return ::google::assistant::embedded::v1alpha2::ScreenOutConfig_ScreenMode_descriptor();
}
template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha2::ScreenOut_Format> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha2::ScreenOut_Format>() {
  return ::google::assistant::embedded::v1alpha2::ScreenOut_Format_descriptor();
}
template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode>() {
  return ::google::assistant::embedded::v1alpha2::DialogStateOut_MicrophoneMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto
