// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/assistant/embedded/v1alpha2/embedded_assistant.proto

#include "google/assistant/embedded/v1alpha2/embedded_assistant.pb.h"
#include "google/assistant/embedded/v1alpha2/embedded_assistant.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace assistant {
namespace embedded {
namespace v1alpha2 {

static const char* EmbeddedAssistant_method_names[] = {
  "/google.assistant.embedded.v1alpha2.EmbeddedAssistant/Assist",
};

std::unique_ptr< EmbeddedAssistant::Stub> EmbeddedAssistant::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EmbeddedAssistant::Stub> stub(new EmbeddedAssistant::Stub(channel));
  return stub;
}

EmbeddedAssistant::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Assist_(EmbeddedAssistant_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::google::assistant::embedded::v1alpha2::AssistRequest, ::google::assistant::embedded::v1alpha2::AssistResponse>* EmbeddedAssistant::Stub::AssistRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::google::assistant::embedded::v1alpha2::AssistRequest, ::google::assistant::embedded::v1alpha2::AssistResponse>::Create(channel_.get(), rpcmethod_Assist_, context);
}

::grpc::ClientAsyncReaderWriter< ::google::assistant::embedded::v1alpha2::AssistRequest, ::google::assistant::embedded::v1alpha2::AssistResponse>* EmbeddedAssistant::Stub::AsyncAssistRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::google::assistant::embedded::v1alpha2::AssistRequest, ::google::assistant::embedded::v1alpha2::AssistResponse>::Create(channel_.get(), cq, rpcmethod_Assist_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::google::assistant::embedded::v1alpha2::AssistRequest, ::google::assistant::embedded::v1alpha2::AssistResponse>* EmbeddedAssistant::Stub::PrepareAsyncAssistRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::google::assistant::embedded::v1alpha2::AssistRequest, ::google::assistant::embedded::v1alpha2::AssistResponse>::Create(channel_.get(), cq, rpcmethod_Assist_, context, false, nullptr);
}

EmbeddedAssistant::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmbeddedAssistant_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< EmbeddedAssistant::Service, ::google::assistant::embedded::v1alpha2::AssistRequest, ::google::assistant::embedded::v1alpha2::AssistResponse>(
          std::mem_fn(&EmbeddedAssistant::Service::Assist), this)));
}

EmbeddedAssistant::Service::~Service() {
}

::grpc::Status EmbeddedAssistant::Service::Assist(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::assistant::embedded::v1alpha2::AssistResponse, ::google::assistant::embedded::v1alpha2::AssistRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace assistant
}  // namespace embedded
}  // namespace v1alpha2

